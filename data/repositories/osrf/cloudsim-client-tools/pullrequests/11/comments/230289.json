{"links": {"self": {"href": "data/repositories/osrf/cloudsim-client-tools/pullrequests/11/comments/230289.json"}, "html": {"href": "#!/osrf/cloudsim-client-tools/pull-requests/11/_/diff#comment-230289"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/osrf/cloudsim-client-tools/pullrequests/11.json"}, "html": {"href": "#!/osrf/cloudsim-client-tools/pull-requests/11"}}, "title": "Netwatcher"}, "content": {"raw": "New versions of vrc_bytecounter and vrc_netwatcher.\n\n* vrc_bytecounter should count all the IP packets between (sim, fc1, fc2) and any other machine except the router. In consequence, there's no more references to the OCU inside the code.\n\n* vrc_netwatcher disables the appropriate link (when the byte usage limit has been reached) by inserting a new FORWARD entry using iptables. If we are disabling the uplink connection, any packet with destination sim, fc1 or fc2 is dropped. If we are disabling the download connection, any packet with source sim, fc1 or fc2 is dropped. The router should be able to communicate in any case because the FORWARD rules does not apply.\n\nFor testing (a little tricky yet):\n\n(1) Use a SL constellation with the networking ready (NAT, public IPs disabled, private IPs within the range 10.0.0.50-10.0.0.53 and openvpn working). At least SL constellation 2 is ready\n\n(2). Start roscore on the simulator machine\n\n(3.1) On the router: Run vrc_bytecounter bond0 as an upstart job (that will be included into the startup scripts soon)\n\n(3.2) On the router: Set the desired uplink and downlink limits. E.g.: redis-cli set vrc/bytes/limit/uplink 5000\n\n(3.3) On the router: Start netwatcher with the 'outage' option: E.g.: ./vrc_netwatcher.py -o\n\n(3.4) On the router: Start an accounting session using ROS. E.g.: rostopic pub -1 /vrc/state/start std_msgs/Empty\n\n(4) Exercise the network outside the router\n\n(5) On the router: Check the current usage. E.g.: redis-cli get vrc/bytes/current/uplink\n\n(6) The appropriate link should be deactivated (and affecting the sim, fc1, fc2) when the limit is reached\n\n(7) Check with netcat or your favorite tool that only the link that exceed the limit is disabled (use UDP)\n\n(8) Check that the comms from/to the router always work\n\n(9) Stop an accounting session using ROS. E.g.: rostopic pub -1 /vrc/state/stop std_msgs/Empty\n\n(10) Check that all the comms are restored", "markup": "markdown", "html": "<p>New versions of vrc_bytecounter and vrc_netwatcher.</p>\n<ul>\n<li>\n<p>vrc_bytecounter should count all the IP packets between (sim, fc1, fc2) and any other machine except the router. In consequence, there's no more references to the OCU inside the code.</p>\n</li>\n<li>\n<p>vrc_netwatcher disables the appropriate link (when the byte usage limit has been reached) by inserting a new FORWARD entry using iptables. If we are disabling the uplink connection, any packet with destination sim, fc1 or fc2 is dropped. If we are disabling the download connection, any packet with source sim, fc1 or fc2 is dropped. The router should be able to communicate in any case because the FORWARD rules does not apply.</p>\n</li>\n</ul>\n<p>For testing (a little tricky yet):</p>\n<p>(1) Use a SL constellation with the networking ready (NAT, public IPs disabled, private IPs within the range 10.0.0.50-10.0.0.53 and openvpn working). At least SL constellation 2 is ready</p>\n<p>(2). Start roscore on the simulator machine</p>\n<p>(3.1) On the router: Run vrc_bytecounter bond0 as an upstart job (that will be included into the startup scripts soon)</p>\n<p>(3.2) On the router: Set the desired uplink and downlink limits. E.g.: redis-cli set vrc/bytes/limit/uplink 5000</p>\n<p>(3.3) On the router: Start netwatcher with the 'outage' option: E.g.: ./vrc_netwatcher.py -o</p>\n<p>(3.4) On the router: Start an accounting session using ROS. E.g.: rostopic pub -1 /vrc/state/start std_msgs/Empty</p>\n<p>(4) Exercise the network outside the router</p>\n<p>(5) On the router: Check the current usage. E.g.: redis-cli get vrc/bytes/current/uplink</p>\n<p>(6) The appropriate link should be deactivated (and affecting the sim, fc1, fc2) when the limit is reached</p>\n<p>(7) Check with netcat or your favorite tool that only the link that exceed the limit is disabled (use UDP)</p>\n<p>(8) Check that the comms from/to the router always work</p>\n<p>(9) Stop an accounting session using ROS. E.g.: rostopic pub -1 /vrc/state/stop std_msgs/Empty</p>\n<p>(10) Check that all the comms are restored</p>", "type": "rendered"}, "created_on": "2013-05-02T10:30:04.518889+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2013-05-02T10:30:04.527911+00:00", "type": "pullrequest_comment", "id": 230289}