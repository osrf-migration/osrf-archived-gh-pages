{"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40175779.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/diff/osrf/gazebo_experimental:9400913b304e..715f4f50e32d?path=src%2Fcomponents%2Fgazebo%2Fcomponents%2FMatrix3d.proto"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40175779"}}, "parent": {"id": 40022995, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40022995.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40022995"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Sure, I'll clarify. I think components shouldn't go into ign-msgs yet. Components will change frequently while we figure out how how all the systems should work. Being in this repo gives them more flexibility to change.\n\nYeah, The API includes math types. What I meant has to do with the generated code. The code generator makes different code for simple types versus complex types (nested messages).\n\n\n```\n#!protobuf\npackage gazebo.components.\n\nimport \"gazebo/components/Vector3d.proto\";\n\nmessage Example\n{\n  message NestedBytesMessage\n  {\n    optional bytes NestedBytes = 1;\n  }\n\n  optional double SomeDouble = 1;\n  optional Vector3d SomeVector = 2;\n  optional NestedMessage SomeMessage = 3;\n}\n```\n\n`SomeDouble` is generated as a simple type.\nThe `Example` component's storage class has a variable `double SomeDouble;`, and the API class has a method `double &SomeDouble();`.\n`SomeMessage` gets treated as a complex type.\nThe storage class for `Example` gets an instance of a storage class generated for `NestedMessage`.\nThe size of the storage for `Example` is increased by the size of the storage for `NestedBytesMessage`.\n`SomeVector` looks like it should be treated as a complex type since it's a nested message, but the code generator treats it like a simple type by replacing it with an ign-math type.\nThe `Example` storage class has a variable `ignition::math::Vector3d SomeVector`, and the API class a method `ignition::math::Vector3d &SomeVector();`.\n\nFor math types like `gazebo/components/Vector3d.proto`, the code generator could be changed to do the same substitution on `ignition/messages/vector3d.proto`.\nThe generated code would be identical, since both are substituted with ign-math types.\nFor types that aren't substituted, like `NestedBytesMessage`, replacing them with the equivalent ign-msgs type \"ignition/msgs/bytes.proto\" changes the generated code.\nAs `Example` is written, the bytes field is accessed using `exampleInstance.SomeMessage().NestedBytes()`.\nIf it used `ignition/msgs/bytes.proto`, the bytes would be accessed using `exampleInstance.SomeMessage().data()`.\nThere would also new APIs for the header: `exampleInstance.SomeMessage().header().stamp()`.\n\nThe size of `Example`'s storage would also be bigger because it would have a nested `Header` message.\nThis is fixable, but some of the messages in ign-msgs are significanly bigger than they need to be.\n`ignition/msgs/pose.proto` has three copies of the header: one in itself, one in the nested Vector3d, and one from the nested Quaternion.\n", "markup": "markdown", "html": "<p>Sure, I'll clarify. I think components shouldn't go into ign-msgs yet. Components will change frequently while we figure out how how all the systems should work. Being in this repo gives them more flexibility to change.</p>\n<p>Yeah, The API includes math types. What I meant has to do with the generated code. The code generator makes different code for simple types versus complex types (nested messages).</p>\n<div class=\"codehilite language-protobuf\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nn\">gazebo</span><span class=\"o\">.</span><span class=\"n\">components.</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;gazebo/components/Vector3d.proto&quot;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">Example</span>\n<span class=\"p\">{</span>\n  <span class=\"kd\">message</span> <span class=\"nc\">NestedBytesMessage</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">optional</span> <span class=\"kt\">bytes</span> <span class=\"na\">NestedBytes</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">optional</span> <span class=\"kt\">double</span> <span class=\"na\">SomeDouble</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">optional</span> <span class=\"n\">Vector3d</span> <span class=\"na\">SomeVector</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">optional</span> <span class=\"n\">NestedMessage</span> <span class=\"na\">SomeMessage</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><code>SomeDouble</code> is generated as a simple type.\nThe <code>Example</code> component's storage class has a variable <code>double SomeDouble;</code>, and the API class has a method <code>double &amp;SomeDouble();</code>.\n<code>SomeMessage</code> gets treated as a complex type.\nThe storage class for <code>Example</code> gets an instance of a storage class generated for <code>NestedMessage</code>.\nThe size of the storage for <code>Example</code> is increased by the size of the storage for <code>NestedBytesMessage</code>.\n<code>SomeVector</code> looks like it should be treated as a complex type since it's a nested message, but the code generator treats it like a simple type by replacing it with an ign-math type.\nThe <code>Example</code> storage class has a variable <code>ignition::math::Vector3d SomeVector</code>, and the API class a method <code>ignition::math::Vector3d &amp;SomeVector();</code>.</p>\n<p>For math types like <code>gazebo/components/Vector3d.proto</code>, the code generator could be changed to do the same substitution on <code>ignition/messages/vector3d.proto</code>.\nThe generated code would be identical, since both are substituted with ign-math types.\nFor types that aren't substituted, like <code>NestedBytesMessage</code>, replacing them with the equivalent ign-msgs type \"ignition/msgs/bytes.proto\" changes the generated code.\nAs <code>Example</code> is written, the bytes field is accessed using <code>exampleInstance.SomeMessage().NestedBytes()</code>.\nIf it used <code>ignition/msgs/bytes.proto</code>, the bytes would be accessed using <code>exampleInstance.SomeMessage().data()</code>.\nThere would also new APIs for the header: <code>exampleInstance.SomeMessage().header().stamp()</code>.</p>\n<p>The size of <code>Example</code>'s storage would also be bigger because it would have a nested <code>Header</code> message.\nThis is fixable, but some of the messages in ign-msgs are significanly bigger than they need to be.\n<code>ignition/msgs/pose.proto</code> has three copies of the header: one in itself, one in the nested Vector3d, and one from the nested Quaternion.</p>", "type": "rendered"}, "created_on": "2017-07-05T21:30:52.285254+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": null, "from": null, "outdated": true, "path": "src/components/gazebo/components/Matrix3d.proto"}, "updated_on": "2017-07-05T21:30:52.288772+00:00", "type": "pullrequest_comment", "id": 40175779}