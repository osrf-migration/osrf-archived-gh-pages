{"pagelen": 50, "values": [{"update": {"description": "**Update** components have been simplified to solve a liking issue. I also fixed likely visibility issues with components on windows after reading  PRs/issues by @traversaro [here](https://bitbucket.org/osrf/gazebo/pull-requests/2738).\r\n\r\nThis feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* ~~Component data can be stored adjacent in memory~~\r\n    * **Update** Components are now normal PIMPL classes. I dropped this optimization in favor of working code now.\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\nauto *comp = someEntity.ComponentMutable<gazebo::components::MyPoseComponent>();\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp->Pose().Pos().X() = 5;\r\ncomp->Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp->ParentFrame() = \"my_frame\";\r\nstd::cout << comp->ParentFrame(); // \"my_frame\"\r\n```\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n~~https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png~~\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* ~~Pose.factory.hh~~\r\n    * ~~Has a factory class with methods for constructing/destructing API and Storage classes~~\r\n    * **Update** Removed factory, component itself is now a plugin\r\n* ~~Pose.factory.cc~~\r\n    * ~~Registers plugin of type gazebo::ecs::ComponentFactory~~\r\n    * **Update** Removed\r\n\r\n~~https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png~~\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of ~~ComponentFactory~~ `Component`, which has methods that allow `gazebo::ecs::EntityComponentDatabase` to store the component without knowing it's type.\r\n\r\n~~https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png~~\r\n\r\n**Update**  Components are a normal PIMPL class. The optimization of allowing the private implementations to be constructed adjacent to each other was removed because it is tricky to make component libraries depend on each other properly. Also I missed something important: alignment.\r\n~~Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.~~", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "458110f786c9", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/458110f786c9.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/458110f786c9"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "Will be replaced by changes on nate_tweaks", "source": {"commit": {"hash": "76cc5fad2e63", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/76cc5fad2e63.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/76cc5fad2e63"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "DECLINED", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-08-01T20:35:58.030652+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41660082.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41660082"}}, "parent": {"id": 41649229, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41649229.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41649229"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "yep, it builds fine now!", "markup": "markdown", "html": "<p>yep, it builds fine now!</p>", "type": "rendered"}, "created_on": "2017-07-27T17:37:57.548890+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2017-07-27T17:37:57.551343+00:00", "type": "pullrequest_comment", "id": 41660082}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41108609.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41108609"}}, "parent": {"id": 41108361, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41108361.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41108361"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I think when I wrote this I meant rename the whole file from `Component.hh` to `ComponentFactory.hh`. I think the file now fits better as `Component.hh` instead of `ComponentFactory.hh`.", "markup": "markdown", "html": "<p>I think when I wrote this I meant rename the whole file from <code>Component.hh</code> to <code>ComponentFactory.hh</code>. I think the file now fits better as <code>Component.hh</code> instead of <code>ComponentFactory.hh</code>.</p>", "type": "rendered"}, "created_on": "2017-07-19T21:22:38.027672+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-27T15:33:54.133081+00:00", "type": "pullrequest_comment", "id": 41108609}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41649342.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41649342"}}, "parent": {"id": 41108361, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41108361.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41108361"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I removed this comment in df9dcdd after making the component itself the plugin, rather than the factory.", "markup": "markdown", "html": "<p>I removed this comment in <a href=\"#!/osrf/gazebo_experimental/commits/df9dcdd\" rel=\"nofollow\" class=\"ap-connect-link\">df9dcdd</a> after making the component itself the plugin, rather than the factory.</p>", "type": "rendered"}, "created_on": "2017-07-27T15:33:28.301760+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-27T15:33:28.304578+00:00", "type": "pullrequest_comment", "id": 41649342}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41649229.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41649229"}}, "parent": {"id": 41018798, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41018798.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41018798"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I think this is fixed by 323ef19. Mind trying it out?\n\nI made components normal PIMPL classes to avoid issues with linking when changes happen in the future.", "markup": "markdown", "html": "<p>I think this is fixed by <a href=\"#!/osrf/gazebo_experimental/commits/323ef19\" rel=\"nofollow\" class=\"ap-connect-link\">323ef19</a>. Mind trying it out?</p>\n<p>I made components normal PIMPL classes to avoid issues with linking when changes happen in the future.</p>", "type": "rendered"}, "created_on": "2017-07-27T15:32:30.618523+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-07-27T15:32:30.621934+00:00", "type": "pullrequest_comment", "id": 41649229}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "**Update** components have been simplified to solve a liking issue. I also fixed likely visibility issues with components on windows after reading  PRs/issues by @traversaro [here](https://bitbucket.org/osrf/gazebo/pull-requests/2738).\r\n\r\nThis feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* ~~Component data can be stored adjacent in memory~~\r\n    * **Update** Components are now normal PIMPL classes. I dropped this optimization in favor of working code now.\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\nauto *comp = someEntity.ComponentMutable<gazebo::components::MyPoseComponent>();\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp->Pose().Pos().X() = 5;\r\ncomp->Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp->ParentFrame() = \"my_frame\";\r\nstd::cout << comp->ParentFrame(); // \"my_frame\"\r\n```\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n~~https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png~~\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* ~~Pose.factory.hh~~\r\n    * ~~Has a factory class with methods for constructing/destructing API and Storage classes~~\r\n    * **Update** Removed factory, component itself is now a plugin\r\n* ~~Pose.factory.cc~~\r\n    * ~~Registers plugin of type gazebo::ecs::ComponentFactory~~\r\n    * **Update** Removed\r\n\r\n~~https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png~~\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of ~~ComponentFactory~~ `Component`, which has methods that allow `gazebo::ecs::EntityComponentDatabase` to store the component without knowing it's type.\r\n\r\n~~https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png~~\r\n\r\n**Update**  Components are a normal PIMPL class. The optimization of allowing the private implementations to be constructed adjacent to each other was removed because it is tricky to make component libraries depend on each other properly. Also I missed something important: alignment.\r\n~~Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.~~", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "553c3830d8e3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/553c3830d8e3.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/553c3830d8e3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "76cc5fad2e63", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/76cc5fad2e63.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/76cc5fad2e63"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-27T15:29:59.404290+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "553c3830d8e3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/553c3830d8e3.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/553c3830d8e3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "76cc5fad2e63", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/76cc5fad2e63.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/76cc5fad2e63"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-27T15:12:14.725473+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "553c3830d8e3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/553c3830d8e3.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/553c3830d8e3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "eced9eb49d99", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/eced9eb49d99.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/eced9eb49d99"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-24T14:40:27.341501+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41111820.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41111820"}}, "parent": {"id": 41018798, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41018798.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41018798"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "This looks like a much larger problem. **TL;DR this will take a couple days to fix**\n\nI meant for component libraries to be self contained (as in the `DefaultValues` in the `NestedMessage` is distinct from `DefaultValues`). When `NestedMessage` is generated, the protobuf compiler also generates code for all protobuf files it imports.  This is what allows `NestedMessage.storage.hh` to include `DefaultValues.storage.hh` even though it's not installed. The source of the issue is the `NestedMessage` library doesn't have the implementations of the `DefaultValue` APIs. The tests just happen to pass on xenial because all of the tests are in the same executable.\n\n**These paragraphs explore solutions I don't think we should do**\n\nOne almost-solution is to make `NestedMessage.api.cc` include `DefaultValues.api.cc` so the `NestedMessage` library has the API definitions. This would work for a while. The problems will begin when someone creates a component in another repo (call it `Flyable`) that depends on a component in this repo (say `Pose`), and then later `Pose` changes.\n\n The `Flyable` storage has a field of type `Pose` storage. If `Pose` later gets an additional field, the field in the `Flyable` storage hasn't changed. When both the updated `Pose` and old `Flyable` are loaded in the same process, there will be duplicate symbols for the API definitions of `Pose`. Depending on which definitions are picked by the loader, there may be segfaults either when accessing a `Pose` component, or when accessing a `Flyable` component.\n\nA complete solution to the almost-solution is to change the names of the symbols of the `Pose` API definitions inside of the `Flyable` library. This can be done in a few ways. The first way is to wrap the imports of `Pose.api.hh`, `Pose.api.cc`, and `Pose.storage.hh` in a namespace. This isn't ideal because it means standard libraries included in `Pose.api.hh` will also get included in that namespace if they haven't been included elsewhere first, which can cause linker and compiler errors in some situations. The second way is the same as the first, but with generated headers split into two parts: one part includes standard libraries and the other part is the generated code. Only the generated code part would be included inside a namespace so as to not accidentally push `std` stuff into a namespace. The third way is to use preprocessor macros to insert namespaces into the header files only when included by other components.\n\n** Right option here **\n\nI think the right option is to ditch the philosophy of making the component self contained and make `Flyable` depend on `Pose`. `Flyable` becomes immune to `Pose` changes and there's no duplicate symbol issues.The downside is it's harder to code. The `Flyable` storage would have to use the `Pose` component factory instead of the `Pose` storage class. The `Flyable` factory would have to use the `Pose` factory to determine the total size of a `Flyable` component, and to construct/destruct/deep copy/shallow copy a `Pose` storage which is adjacent to the `Flyable` storage. The `Flyable` API definition responsible for returning a `Pose` API instance would have to use the `Flyable` factory to determine the address of the constructed `Pose` storage. There are a bunch of details, but it's doable.", "markup": "markdown", "html": "<p>This looks like a much larger problem. <strong>TL;DR this will take a couple days to fix</strong></p>\n<p>I meant for component libraries to be self contained (as in the <code>DefaultValues</code> in the <code>NestedMessage</code> is distinct from <code>DefaultValues</code>). When <code>NestedMessage</code> is generated, the protobuf compiler also generates code for all protobuf files it imports.  This is what allows <code>NestedMessage.storage.hh</code> to include <code>DefaultValues.storage.hh</code> even though it's not installed. The source of the issue is the <code>NestedMessage</code> library doesn't have the implementations of the <code>DefaultValue</code> APIs. The tests just happen to pass on xenial because all of the tests are in the same executable.</p>\n<p><strong>These paragraphs explore solutions I don't think we should do</strong></p>\n<p>One almost-solution is to make <code>NestedMessage.api.cc</code> include <code>DefaultValues.api.cc</code> so the <code>NestedMessage</code> library has the API definitions. This would work for a while. The problems will begin when someone creates a component in another repo (call it <code>Flyable</code>) that depends on a component in this repo (say <code>Pose</code>), and then later <code>Pose</code> changes.</p>\n<p>The <code>Flyable</code> storage has a field of type <code>Pose</code> storage. If <code>Pose</code> later gets an additional field, the field in the <code>Flyable</code> storage hasn't changed. When both the updated <code>Pose</code> and old <code>Flyable</code> are loaded in the same process, there will be duplicate symbols for the API definitions of <code>Pose</code>. Depending on which definitions are picked by the loader, there may be segfaults either when accessing a <code>Pose</code> component, or when accessing a <code>Flyable</code> component.</p>\n<p>A complete solution to the almost-solution is to change the names of the symbols of the <code>Pose</code> API definitions inside of the <code>Flyable</code> library. This can be done in a few ways. The first way is to wrap the imports of <code>Pose.api.hh</code>, <code>Pose.api.cc</code>, and <code>Pose.storage.hh</code> in a namespace. This isn't ideal because it means standard libraries included in <code>Pose.api.hh</code> will also get included in that namespace if they haven't been included elsewhere first, which can cause linker and compiler errors in some situations. The second way is the same as the first, but with generated headers split into two parts: one part includes standard libraries and the other part is the generated code. Only the generated code part would be included inside a namespace so as to not accidentally push <code>std</code> stuff into a namespace. The third way is to use preprocessor macros to insert namespaces into the header files only when included by other components.</p>\n<p><strong> Right option here </strong></p>\n<p>I think the right option is to ditch the philosophy of making the component self contained and make <code>Flyable</code> depend on <code>Pose</code>. <code>Flyable</code> becomes immune to <code>Pose</code> changes and there's no duplicate symbol issues.The downside is it's harder to code. The <code>Flyable</code> storage would have to use the <code>Pose</code> component factory instead of the <code>Pose</code> storage class. The <code>Flyable</code> factory would have to use the <code>Pose</code> factory to determine the total size of a <code>Flyable</code> component, and to construct/destruct/deep copy/shallow copy a <code>Pose</code> storage which is adjacent to the <code>Flyable</code> storage. The <code>Flyable</code> API definition responsible for returning a <code>Pose</code> API instance would have to use the <code>Flyable</code> factory to determine the address of the constructed <code>Pose</code> storage. There are a bunch of details, but it's doable.</p>", "type": "rendered"}, "created_on": "2017-07-19T22:21:53.271790+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-07-19T22:21:53.274513+00:00", "type": "pullrequest_comment", "id": 41111820}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41108733.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41108733"}}, "parent": {"id": 41108609, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41108609.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41108609"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "+1 to that", "markup": "markdown", "html": "<p>+1 to that</p>", "type": "rendered"}, "created_on": "2017-07-19T21:24:44.861881+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-07-19T21:24:44.864437+00:00", "type": "pullrequest_comment", "id": 41108733}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41108361.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41108361"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "What is \"this\"? Only the factory class?", "markup": "markdown", "html": "<p>What is \"this\"? Only the factory class?</p>", "type": "rendered"}, "created_on": "2017-07-19T21:18:17.537622+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-07-19T21:18:17.540221+00:00", "type": "pullrequest_comment", "id": 41108361}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41099284.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41099284"}}, "parent": {"id": 41089753, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41089753.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41089753"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "hehehe we have seen worse things (I remember DRCSim repo). Don't worry about them, I'll take care.", "markup": "markdown", "html": "<p>hehehe we have seen worse things (I remember DRCSim repo). Don't worry about them, I'll take care.</p>", "type": "rendered"}, "created_on": "2017-07-19T19:03:17.424559+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2017-07-19T19:03:17.427565+00:00", "type": "pullrequest_comment", "id": 41099284}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41089753.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41089753"}}, "parent": {"id": 41068346, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41068346.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41068346"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "That's a lot of cppcheck warnings! The C++ files touched by this PR all appear to be warning free.", "markup": "markdown", "html": "<p>That's a lot of cppcheck warnings! The C++ files touched by this PR all appear to be warning free.</p>", "type": "rendered"}, "created_on": "2017-07-19T16:53:38.680279+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-07-19T16:53:38.683744+00:00", "type": "pullrequest_comment", "id": 41089753}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41087739.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41087739"}}, "parent": {"id": 41065539, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41065539.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41065539"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Added 2ec3d62\n\nexample\n```\n#!C++\n/* ***********************************\n * ******** GENERATED FILE ***********\n * *      Do not edit directly       *\n * ***********************************\n * This file was generated on 2017-07-19 09:26:35.569498 using the command\n * ['/build/gzex_ws/src/gazebo_experimental/src/components/protoc-gen-PIMPL-CPP']\n * from the file\n * gazebo/components/Matrix3d.proto\n * ***********************************\n */\n```", "markup": "markdown", "html": "<p>Added <a href=\"#!/osrf/gazebo_experimental/commits/2ec3d62\" rel=\"nofollow\" class=\"ap-connect-link\">2ec3d62</a></p>\n<p>example</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cm\">/* ***********************************</span>\n<span class=\"cm\"> * ******** GENERATED FILE ***********</span>\n<span class=\"cm\"> * *      Do not edit directly       *</span>\n<span class=\"cm\"> * ***********************************</span>\n<span class=\"cm\"> * This file was generated on 2017-07-19 09:26:35.569498 using the command</span>\n<span class=\"cm\"> * [&#39;/build/gzex_ws/src/gazebo_experimental/src/components/protoc-gen-PIMPL-CPP&#39;]</span>\n<span class=\"cm\"> * from the file</span>\n<span class=\"cm\"> * gazebo/components/Matrix3d.proto</span>\n<span class=\"cm\"> * ***********************************</span>\n<span class=\"cm\"> */</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-19T16:29:59.598910+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-07-19T16:30:10.228352+00:00", "type": "pullrequest_comment", "id": 41087739}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2ec3d62a7323", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/2ec3d62a7323.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/2ec3d62a7323"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-19T16:28:26.296562+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41086242.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41086242"}}, "parent": {"id": 41065021, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41065021.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41065021"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Added 43e4eeb", "markup": "markdown", "html": "<p>Added <a href=\"#!/osrf/gazebo_experimental/commits/43e4eeb\" rel=\"nofollow\" class=\"ap-connect-link\">43e4eeb</a></p>", "type": "rendered"}, "created_on": "2017-07-19T16:11:36.323968+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-19T16:11:36.327117+00:00", "type": "pullrequest_comment", "id": 41086242}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "43e4eeb1dece", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/43e4eeb1dece.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/43e4eeb1dece"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-19T16:11:19.688872+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41068346.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41068346"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "[The Jenkins build in Xenial](https://build.osrfoundation.org/job/gazebo_experimental-ci-pr_any-xenial-amd64-gpu-none/). There are some cppcheck warnings, most of the them come probably from default branch, not sure if any of them is introduced by these changes.\n\nThe thing compiles fine for me under Xenial docker, tests are passing, valgrind is happy. I like the design to place different instances adjacently in memory, it can be a good performance improvement.", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/gazebo_experimental-ci-pr_any-xenial-amd64-gpu-none/\" rel=\"nofollow\">The Jenkins build in Xenial</a>. There are some cppcheck warnings, most of the them come probably from default branch, not sure if any of them is introduced by these changes.</p>\n<p>The thing compiles fine for me under Xenial docker, tests are passing, valgrind is happy. I like the design to place different instances adjacently in memory, it can be a good performance improvement.</p>", "type": "rendered"}, "created_on": "2017-07-19T13:36:32.864791+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2017-07-19T13:38:22.453064+00:00", "type": "pullrequest_comment", "id": 41068346}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41065539.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41065539"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Maybe we can include a comment in the templates that warn users that \"This is a generated file\" so people does not have the intention of modifying them directly.", "markup": "markdown", "html": "<p>Maybe we can include a comment in the templates that warn users that \"This is a generated file\" so people does not have the intention of modifying them directly.</p>", "type": "rendered"}, "created_on": "2017-07-19T13:11:37.188620+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2017-07-19T13:11:37.194489+00:00", "type": "pullrequest_comment", "id": 41065539}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41065021.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41065021"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "copyright message here?", "markup": "markdown", "html": "<p>copyright message here?</p>", "type": "rendered"}, "created_on": "2017-07-19T13:06:46.984449+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "inline": {}, "updated_on": "2017-07-19T13:06:46.987137+00:00", "type": "pullrequest_comment", "id": 41065021}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/41018798.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-41018798"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I'm getting OSX linking errors for `RepeatedMessage.api.cc`, `OneofMessage.api.cc`, `NestedMessage.api.cc`:\n\n~~~\nUndefined symbols for architecture x86_64:\n  \"vtable for gazebo::components::test::DefaultValues\", referenced from:\n      gazebo::components::test::DefaultValues::DefaultValues(gazebo::components::test::DefaultValuesStorage*) in RepeatedMessage.api.cc.o\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n~~~\n\nThey all depend on `DefaultValues` so we may have to update `GAZEBO_GENERATE_COMPONENT` to take in library dependencies", "markup": "markdown", "html": "<p>I'm getting OSX linking errors for <code>RepeatedMessage.api.cc</code>, <code>OneofMessage.api.cc</code>, <code>NestedMessage.api.cc</code>:</p>\n<div class=\"codehilite\"><pre><span></span>Undefined symbols for architecture x86_64:\n  &quot;vtable for gazebo::components::test::DefaultValues&quot;, referenced from:\n      gazebo::components::test::DefaultValues::DefaultValues(gazebo::components::test::DefaultValuesStorage*) in RepeatedMessage.api.cc.o\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</pre></div>\n\n\n<p>They all depend on <code>DefaultValues</code> so we may have to update <code>GAZEBO_GENERATE_COMPONENT</code> to take in library dependencies</p>", "type": "rendered"}, "created_on": "2017-07-19T00:52:15.846680+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2017-07-19T00:52:15.850014+00:00", "type": "pullrequest_comment", "id": 41018798}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40910468.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40910468"}}, "parent": {"id": 40907324, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40907324.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40907324"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "good to know, thanks!", "markup": "markdown", "html": "<p>good to know, thanks!</p>", "type": "rendered"}, "created_on": "2017-07-17T21:00:12.203148+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-07-17T21:00:12.206382+00:00", "type": "pullrequest_comment", "id": 40910468}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40907324.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40907324"}}, "parent": {"id": 40906760, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40906760.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40906760"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Update: The code compiles and tests pass.", "markup": "markdown", "html": "<p>Update: The code compiles and tests pass.</p>", "type": "rendered"}, "created_on": "2017-07-17T20:10:23.085030+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2017-07-17T20:10:23.088777+00:00", "type": "pullrequest_comment", "id": 40907324}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40906760.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40906760"}}, "parent": {"id": 40902419, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40902419.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40902419"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I'm testing it right now on Ubuntu Zesty.", "markup": "markdown", "html": "<p>I'm testing it right now on Ubuntu Zesty.</p>", "type": "rendered"}, "created_on": "2017-07-17T20:01:20.400821+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2017-07-17T20:01:20.405456+00:00", "type": "pullrequest_comment", "id": 40906760}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40903263.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40903263"}}, "parent": {"id": 40903123, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40903123.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40903123"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "issue #31", "markup": "markdown", "html": "<p>issue <a href=\"#!/osrf/gazebo_experimental/issues/31/generate-test-config-file\" rel=\"nofollow\" title=\"Generate test config file\" class=\"ap-connect-link\">#31</a></p>", "type": "rendered"}, "created_on": "2017-07-17T19:11:27.812709+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-07-17T19:11:27.814999+00:00", "type": "pullrequest_comment", "id": 40903263}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40903123.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40903123"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "we could generate a `test_config.h` similar to the ign libraries to avoid having to be in a specific directory to run the test. I'll ticket an issue for this", "markup": "markdown", "html": "<p>we could generate a <code>test_config.h</code> similar to the ign libraries to avoid having to be in a specific directory to run the test. I'll ticket an issue for this</p>", "type": "rendered"}, "created_on": "2017-07-17T19:09:35.289123+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-07-17T19:09:35.292865+00:00", "type": "pullrequest_comment", "id": 40903123}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40902679.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40902679"}}, "parent": {"id": 40902526, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40902526.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40902526"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "oh just curious that's all. Don't have to test it now if it's too much trouble. ", "markup": "markdown", "html": "<p>oh just curious that's all. Don't have to test it now if it's too much trouble. </p>", "type": "rendered"}, "created_on": "2017-07-17T19:03:18.061247+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-07-17T19:03:18.064451+00:00", "type": "pullrequest_comment", "id": 40902679}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40902526.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40902526"}}, "parent": {"id": 40902419, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40902419.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40902419"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I don't know.  Zesty has protobuf3; I'll spin up a docker container and try it.", "markup": "markdown", "html": "<p>I don't know.  Zesty has protobuf3; I'll spin up a docker container and try it.</p>", "type": "rendered"}, "created_on": "2017-07-17T19:00:53.905189+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-17T19:00:53.907906+00:00", "type": "pullrequest_comment", "id": 40902526}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40902419.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40902419"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "do you know if the generator will be compatible with protobuf3?", "markup": "markdown", "html": "<p>do you know if the generator will be compatible with protobuf3?</p>", "type": "rendered"}, "created_on": "2017-07-17T18:59:05.445214+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-07-17T18:59:05.447546+00:00", "type": "pullrequest_comment", "id": 40902419}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9400913b304e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/9400913b304e.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/9400913b304e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "date": "2017-07-17T17:43:57.870842+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9400913b304e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/9400913b304e.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/9400913b304e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "date": "2017-07-17T17:43:57.777044+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9f631ef1588e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/9f631ef1588e.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/9f631ef1588e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-06T20:53:19.240056+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40181019.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40181019"}}, "parent": {"id": 40023209, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40023209.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40023209"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Added to README \n\t\n776ef90", "markup": "markdown", "html": "<p>Added to README </p>\n<p><a href=\"#!/osrf/gazebo_experimental/commits/776ef90\" rel=\"nofollow\" class=\"ap-connect-link\">776ef90</a></p>", "type": "rendered"}, "created_on": "2017-07-05T23:51:16.737992+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-07-05T23:51:16.740366+00:00", "type": "pullrequest_comment", "id": 40181019}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "776ef908ab0a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/776ef908ab0a.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/776ef908ab0a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T23:50:41.814187+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "87fd21928859", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/87fd21928859.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/87fd21928859"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T22:02:59.519868+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is the code to generate c++ code from protobuf files using a protobuf compiler plugin. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "264e5ef1ee2d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/264e5ef1ee2d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/264e5ef1ee2d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T21:39:17.674950+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into two pull requests. This pull request is only the component generating code. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "264e5ef1ee2d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/264e5ef1ee2d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/264e5ef1ee2d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T21:37:42.697065+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "This feature is split into pull requests. This pull request is only the component generating code. The integration of this with the rest of the code is in pull request #37.\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "264e5ef1ee2d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/264e5ef1ee2d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/264e5ef1ee2d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T21:37:28.566940+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40175937.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40175937"}}, "parent": {"id": 40023125, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40023125.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40023125"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Fixed 264e5ef", "markup": "markdown", "html": "<p>Fixed <a href=\"#!/osrf/gazebo_experimental/commits/264e5ef\" rel=\"nofollow\" class=\"ap-connect-link\">264e5ef</a></p>", "type": "rendered"}, "created_on": "2017-07-05T21:34:05.681976+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-05T21:34:05.685463+00:00", "type": "pullrequest_comment", "id": 40175937}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "Depends on pull request #33 being merged, after which this can be retargeted at default. This pull request is only the component generating code. The integration of this is in pull request #37\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "264e5ef1ee2d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/264e5ef1ee2d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/264e5ef1ee2d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T21:33:44.597149+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40175779.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40175779"}}, "parent": {"id": 40022995, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40022995.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40022995"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "Sure, I'll clarify. I think components shouldn't go into ign-msgs yet. Components will change frequently while we figure out how how all the systems should work. Being in this repo gives them more flexibility to change.\n\nYeah, The API includes math types. What I meant has to do with the generated code. The code generator makes different code for simple types versus complex types (nested messages).\n\n\n```\n#!protobuf\npackage gazebo.components.\n\nimport \"gazebo/components/Vector3d.proto\";\n\nmessage Example\n{\n  message NestedBytesMessage\n  {\n    optional bytes NestedBytes = 1;\n  }\n\n  optional double SomeDouble = 1;\n  optional Vector3d SomeVector = 2;\n  optional NestedMessage SomeMessage = 3;\n}\n```\n\n`SomeDouble` is generated as a simple type.\nThe `Example` component's storage class has a variable `double SomeDouble;`, and the API class has a method `double &SomeDouble();`.\n`SomeMessage` gets treated as a complex type.\nThe storage class for `Example` gets an instance of a storage class generated for `NestedMessage`.\nThe size of the storage for `Example` is increased by the size of the storage for `NestedBytesMessage`.\n`SomeVector` looks like it should be treated as a complex type since it's a nested message, but the code generator treats it like a simple type by replacing it with an ign-math type.\nThe `Example` storage class has a variable `ignition::math::Vector3d SomeVector`, and the API class a method `ignition::math::Vector3d &SomeVector();`.\n\nFor math types like `gazebo/components/Vector3d.proto`, the code generator could be changed to do the same substitution on `ignition/messages/vector3d.proto`.\nThe generated code would be identical, since both are substituted with ign-math types.\nFor types that aren't substituted, like `NestedBytesMessage`, replacing them with the equivalent ign-msgs type \"ignition/msgs/bytes.proto\" changes the generated code.\nAs `Example` is written, the bytes field is accessed using `exampleInstance.SomeMessage().NestedBytes()`.\nIf it used `ignition/msgs/bytes.proto`, the bytes would be accessed using `exampleInstance.SomeMessage().data()`.\nThere would also new APIs for the header: `exampleInstance.SomeMessage().header().stamp()`.\n\nThe size of `Example`'s storage would also be bigger because it would have a nested `Header` message.\nThis is fixable, but some of the messages in ign-msgs are significanly bigger than they need to be.\n`ignition/msgs/pose.proto` has three copies of the header: one in itself, one in the nested Vector3d, and one from the nested Quaternion.\n", "markup": "markdown", "html": "<p>Sure, I'll clarify. I think components shouldn't go into ign-msgs yet. Components will change frequently while we figure out how how all the systems should work. Being in this repo gives them more flexibility to change.</p>\n<p>Yeah, The API includes math types. What I meant has to do with the generated code. The code generator makes different code for simple types versus complex types (nested messages).</p>\n<div class=\"codehilite language-protobuf\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nn\">gazebo</span><span class=\"o\">.</span><span class=\"n\">components.</span>\n\n<span class=\"k\">import</span> <span class=\"s\">&quot;gazebo/components/Vector3d.proto&quot;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">Example</span>\n<span class=\"p\">{</span>\n  <span class=\"kd\">message</span> <span class=\"nc\">NestedBytesMessage</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">optional</span> <span class=\"kt\">bytes</span> <span class=\"na\">NestedBytes</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">optional</span> <span class=\"kt\">double</span> <span class=\"na\">SomeDouble</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">optional</span> <span class=\"n\">Vector3d</span> <span class=\"na\">SomeVector</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">optional</span> <span class=\"n\">NestedMessage</span> <span class=\"na\">SomeMessage</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><code>SomeDouble</code> is generated as a simple type.\nThe <code>Example</code> component's storage class has a variable <code>double SomeDouble;</code>, and the API class has a method <code>double &amp;SomeDouble();</code>.\n<code>SomeMessage</code> gets treated as a complex type.\nThe storage class for <code>Example</code> gets an instance of a storage class generated for <code>NestedMessage</code>.\nThe size of the storage for <code>Example</code> is increased by the size of the storage for <code>NestedBytesMessage</code>.\n<code>SomeVector</code> looks like it should be treated as a complex type since it's a nested message, but the code generator treats it like a simple type by replacing it with an ign-math type.\nThe <code>Example</code> storage class has a variable <code>ignition::math::Vector3d SomeVector</code>, and the API class a method <code>ignition::math::Vector3d &amp;SomeVector();</code>.</p>\n<p>For math types like <code>gazebo/components/Vector3d.proto</code>, the code generator could be changed to do the same substitution on <code>ignition/messages/vector3d.proto</code>.\nThe generated code would be identical, since both are substituted with ign-math types.\nFor types that aren't substituted, like <code>NestedBytesMessage</code>, replacing them with the equivalent ign-msgs type \"ignition/msgs/bytes.proto\" changes the generated code.\nAs <code>Example</code> is written, the bytes field is accessed using <code>exampleInstance.SomeMessage().NestedBytes()</code>.\nIf it used <code>ignition/msgs/bytes.proto</code>, the bytes would be accessed using <code>exampleInstance.SomeMessage().data()</code>.\nThere would also new APIs for the header: <code>exampleInstance.SomeMessage().header().stamp()</code>.</p>\n<p>The size of <code>Example</code>'s storage would also be bigger because it would have a nested <code>Header</code> message.\nThis is fixable, but some of the messages in ign-msgs are significanly bigger than they need to be.\n<code>ignition/msgs/pose.proto</code> has three copies of the header: one in itself, one in the nested Vector3d, and one from the nested Quaternion.</p>", "type": "rendered"}, "created_on": "2017-07-05T21:30:52.285254+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-05T21:30:52.288772+00:00", "type": "pullrequest_comment", "id": 40175779}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40172396.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40172396"}}, "parent": {"id": 40171858, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40171858.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40171858"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I think we can just leave it here until we need it somewhere else... I was mainly thinking of developers writing plugins in the future...", "markup": "markdown", "html": "<p>I think we can just leave it here until we need it somewhere else... I was mainly thinking of developers writing plugins in the future...</p>", "type": "rendered"}, "created_on": "2017-07-05T20:31:23.561077+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-07-05T20:31:23.563777+00:00", "type": "pullrequest_comment", "id": 40172396}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40171858.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40171858"}}, "parent": {"id": 40165655, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40165655.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40165655"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "I'm not sure. How about moving it to a header that other tests can include?", "markup": "markdown", "html": "<p>I'm not sure. How about moving it to a header that other tests can include?</p>", "type": "rendered"}, "created_on": "2017-07-05T20:23:30.500664+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-05T20:23:30.503831+00:00", "type": "pullrequest_comment", "id": 40171858}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40171771.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40171771"}}, "parent": {"id": 40164548, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40164548.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40164548"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "6e4ea04 adds a printed message saying the test needs to be run from the directory containing it when some `ASSERT_` statements are triggered.", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo_experimental/commits/6e4ea04\" rel=\"nofollow\" class=\"ap-connect-link\">6e4ea04</a> adds a printed message saying the test needs to be run from the directory containing it when some <code>ASSERT_</code> statements are triggered.</p>", "type": "rendered"}, "created_on": "2017-07-05T20:22:17.811597+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-07-05T20:22:17.814427+00:00", "type": "pullrequest_comment", "id": 40171771}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "Depends on pull request #33 being merged, after which this can be retargeted at default. This pull request is only the component generating code. The integration of this is in pull request #37\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "715f4f50e32d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/715f4f50e32d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/715f4f50e32d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6e4ea04d7b02", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6e4ea04d7b02.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6e4ea04d7b02"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T20:19:42.701666+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "Depends on pull request #33 being merged, after which this can be retargeted at default. This pull request is only the component generating code. The integration of this is in pull request #37\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "6e1326f5d59c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6e1326f5d59c.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6e1326f5d59c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2028acc5e3a5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/2028acc5e3a5.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/2028acc5e3a5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T19:40:31.984225+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "Depends on pull request #33 being merged, after which this can be retargeted at default. This pull request is only the component generating code. The integration of this is in pull request #37\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "6e1326f5d59c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6e1326f5d59c.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6e1326f5d59c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a879a7726bd4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/a879a7726bd4.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/a879a7726bd4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T19:38:41.251325+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "Depends on pull request #33 being merged, after which this can be retargeted at default. This pull request is only the component generating code. The integration of this is in pull request #37\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "6e1326f5d59c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6e1326f5d59c.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6e1326f5d59c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a879a7726bd4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/a879a7726bd4.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/a879a7726bd4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T19:38:41.201046+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"update": {"description": "Depends on pull request #33 being merged, after which this can be retargeted at default. This pull request is only the component generating code. The integration of this is in pull request #37\r\n\r\nThis is a redesign of components. The goal for this pull request is to offer these benefits\r\n\r\n* No use of RTTI #29\r\n* Components use PIMPL #25\r\n\r\nWithout losing these benefits:\r\n\r\n* New components come from plugins without recompiling the database\r\n* Component data can be stored adjacent in memory\r\n* Components have convenient `ignition::math` types\r\n\r\nAnd with a path towards these features in the future:\r\n\r\n* Components are serializable\r\n    * Create a component viewer #19\r\n    * Run ECS on different systems #18 \r\n\r\nA protobuf compiler plugin generates c++ code for components. A developer will write a protobuf message, invoke a cmake macro to turn it into a component, and use the generated API.\r\n\r\nFor example this protobuf message\r\n\r\n```\r\nsyntax = \"proto2\";\r\n\r\npackage gazebo.components;\r\n\r\nimport \"gazebo/components/Pose3d.proto\";\r\n\r\nmessage MyPoseComponent\r\n{\r\n  optional string ParentFrame = 1;\r\n  optional Pose3d Pose = 3;\r\n}\r\n```\r\n\r\nWould be used like this:\r\n```\r\n// Component API files end in \".api.hh\"\r\n#include \"gazebo/components/MyPoseComponent.api.hh\"\r\n// ...\r\n// No RTTI being used here, MyPoseComponent has a class-wide id given to it by the database\r\ngazebo::components::MyPoseComponent comp;\r\nsomeEntity.Component(comp);\r\n\r\n// .gazebo.components.Pose3d swapped for igntion::math::Pose3d type\r\ncomp.Pose().Pos().X() = 5;\r\ncomp.Pose().Rot().W() = 1.0f;\r\n\r\n// ParentFrame string became a method that returns a reference\r\ncomp.ParentFrame() = \"my_frame\";\r\nstd::cout << comp.ParentFrame(); // \"my_frame\"\r\n```\r\n\r\n\r\nNotes/Limitations on generation from protobuf files:\r\n\r\n* must have exactly one top-level message per proto file\r\n* can import other proto files as long as they have exactly one top-level message\r\n* can use enumerations as long as they're nested in a message\r\n* Vector3d, quaternion, matrix3d, and Pose are replaced with ignition::math types in API\r\n\r\n\r\nTo-do in the future\r\n\r\n* Make components serializable (Shouldn't be too hard, they're defined as protobuf messages)\r\n* Do the cool things that need serializable components (Multiple PCs powering one simulation, component viewer, etc)\r\n\r\n\r\n## Generated Code ##\r\n\r\n![generated_files.png](https://bitbucket.org/repo/baqryA7/images/2722483835-generated_files.png)\r\n\r\nGiven a protobuf file called `Pose.proto`, the protoc plugin will generate these files:\r\n\r\n* `Pose.api.hh`\r\n    * Has Api class called `Pose` using PIMPL pattern\r\n    * Api class inherits from `gazebo::ecs::ComponentAPI`\r\n    * This is the only header file that gets installed\r\n* `Pose.api.cc`\r\n    * Definitions for generated API class\r\n* `Pose.storage.hh`\r\n    * Has storage class called `PoseStorage`\r\n* `Pose.factory.hh`\r\n    * Has a factory class with methods for constructing/destructing API and Storage classes\r\n* `Pose.factory.cc`\r\n    * Registers plugin of type `gazebo::ecs::ComponentFactory`\r\n\r\n![libgazboComponentXIncludes.png](https://bitbucket.org/repo/baqryA7/images/3425815260-libgazboComponentXIncludes.png)\r\n\r\nThe generated files get built into a single plugin library called `libGazeboComponentPose.so`. Loading this library gives an instance of `ComponentFactory`, which will allow `gazebo::ecs::EntityComponentDatabase` to store the component.\r\n\r\n![database_pimpl.png](https://bitbucket.org/repo/baqryA7/images/1871514051-database_pimpl.png)\r\n\r\n Unlike a normal PIMPL class, the private implementation isn't allocated in some random place on the heap. The database will use the factory to construct them adjacent in memory. When a user asks for a component on an entity, they get an instance of the API class constructed with a reference to storage inside of the database. This layout means fewer cache misses when a system does work with components because the storage for that type of component is tightly packed.", "title": "Components defined by protobuf files", "destination": {"commit": {"hash": "a6c4d2e6dd0f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/a6c4d2e6dd0f.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/a6c4d2e6dd0f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a879a7726bd4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/a879a7726bd4.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/a879a7726bd4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "components_pimpl"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-07-05T19:05:33.281608+00:00"}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36/comments/40165655.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36/_/diff#comment-40165655"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}, "content": {"raw": "It looks like this class could be useful outside of the test's context, what do you think?", "markup": "markdown", "html": "<p>It looks like this class could be useful outside of the test's context, what do you think?</p>", "type": "rendered"}, "created_on": "2017-07-05T18:41:00.435539+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-07-05T18:41:00.437959+00:00", "type": "pullrequest_comment", "id": 40165655}, "pull_request": {"type": "pullrequest", "id": 36, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/36"}}, "title": "Components defined by protobuf files"}}], "next": "data/repositories/osrf/gazebo_experimental/pullrequests/36/activity_ctx=a7uEBu8UE.json"}