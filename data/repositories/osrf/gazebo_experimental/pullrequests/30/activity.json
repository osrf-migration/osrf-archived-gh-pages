{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/40023441.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-40023441"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "There are several other elements in SDF which have poses (light, sensor, joint, inertial, actor...). Is the idea to eventually list them all here? I wonder if there is a more automated way of handling this...", "markup": "markdown", "html": "<p>There are several other elements in SDF which have poses (light, sensor, joint, inertial, actor...). Is the idea to eventually list them all here? I wonder if there is a more automated way of handling this...</p>", "type": "rendered"}, "created_on": "2017-07-04T01:08:47.369020+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-07-04T01:08:47.371589+00:00", "type": "pullrequest_comment", "id": 40023441}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "4deac4e79cc3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/4deac4e79cc3.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/4deac4e79cc3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e863e2dadd4b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/e863e2dadd4b.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/e863e2dadd4b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "MERGED", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-06-16T22:01:08.098269+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e863e2dadd4b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/e863e2dadd4b.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/e863e2dadd4b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-06-05T15:31:27.564590+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8d3ee97e5a36", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/8d3ee97e5a36.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/8d3ee97e5a36"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-06-02T15:37:58.347987+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38109019.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38109019"}}, "parent": {"id": 37949666, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37949666.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37949666"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Yup. Looks like there were a lot of copy/paste artifacts \n\t\naefe6af", "markup": "markdown", "html": "<p>Yup. Looks like there were a lot of copy/paste artifacts </p>\n<p><a href=\"#!/osrf/gazebo_experimental/commits/aefe6af\" rel=\"nofollow\" class=\"ap-connect-link\">aefe6af</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:57:53.323034+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:57:53.326118+00:00", "type": "pullrequest_comment", "id": 38109019}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108972.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108972"}}, "parent": {"id": 37950534, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37950534.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37950534"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Done 43d780b", "markup": "markdown", "html": "<p>Done <a href=\"#!/osrf/gazebo_experimental/commits/43d780b\" rel=\"nofollow\" class=\"ap-connect-link\">43d780b</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:57:23.516027+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:57:23.518663+00:00", "type": "pullrequest_comment", "id": 38108972}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108946.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108946"}}, "parent": {"id": 37951567, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951567.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951567"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Sounds good to me bc8c54f", "markup": "markdown", "html": "<p>Sounds good to me <a href=\"#!/osrf/gazebo_experimental/commits/bc8c54f\" rel=\"nofollow\" class=\"ap-connect-link\">bc8c54f</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:57:07.688267+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:57:14.360630+00:00", "type": "pullrequest_comment", "id": 38108946}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108928.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108928"}}, "parent": {"id": 37951799, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951799.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951799"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Done e4292c6", "markup": "markdown", "html": "<p>Done <a href=\"#!/osrf/gazebo_experimental/commits/e4292c6\" rel=\"nofollow\" class=\"ap-connect-link\">e4292c6</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:56:53.718248+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:56:53.721580+00:00", "type": "pullrequest_comment", "id": 38108928}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108913.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108913"}}, "parent": {"id": 37951919, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951919.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951919"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Done 6c2599a", "markup": "markdown", "html": "<p>Done <a href=\"#!/osrf/gazebo_experimental/commits/6c2599a\" rel=\"nofollow\" class=\"ap-connect-link\">6c2599a</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:56:43.895637+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:56:43.898665+00:00", "type": "pullrequest_comment", "id": 38108913}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108887.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108887"}}, "parent": {"id": 37951925, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951925.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951925"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Done 33689ab", "markup": "markdown", "html": "<p>Done <a href=\"#!/osrf/gazebo_experimental/commits/33689ab\" rel=\"nofollow\" class=\"ap-connect-link\">33689ab</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:56:25.290469+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:56:25.292821+00:00", "type": "pullrequest_comment", "id": 38108887}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108869.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108869"}}, "parent": {"id": 37952102, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37952102.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37952102"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Done 1334e8c", "markup": "markdown", "html": "<p>Done <a href=\"#!/osrf/gazebo_experimental/commits/1334e8c\" rel=\"nofollow\" class=\"ap-connect-link\">1334e8c</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:56:12.572795+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:56:12.575362+00:00", "type": "pullrequest_comment", "id": 38108869}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108849.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108849"}}, "parent": {"id": 37952192, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37952192.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37952192"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Done ada6895", "markup": "markdown", "html": "<p>Done <a href=\"#!/osrf/gazebo_experimental/commits/ada6895\" rel=\"nofollow\" class=\"ap-connect-link\">ada6895</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:56:00.402542+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:56:00.405059+00:00", "type": "pullrequest_comment", "id": 38108849}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38108823.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38108823"}}, "parent": {"id": 37957611, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37957611.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37957611"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Done 4a5e694", "markup": "markdown", "html": "<p>Done <a href=\"#!/osrf/gazebo_experimental/commits/4a5e694\" rel=\"nofollow\" class=\"ap-connect-link\">4a5e694</a></p>", "type": "rendered"}, "created_on": "2017-06-02T14:55:46.617476+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-02T14:55:46.620831+00:00", "type": "pullrequest_comment", "id": 38108823}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4a5e694a9287", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/4a5e694a9287.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/4a5e694a9287"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-06-02T14:53:30.613761+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38042926.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38042926"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Builds without warnings on my machine, tests pass.", "markup": "markdown", "html": "<p>Builds without warnings on my machine, tests pass.</p>", "type": "rendered"}, "created_on": "2017-06-01T19:05:20.841279+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "updated_on": "2017-06-01T19:05:20.843623+00:00", "type": "pullrequest_comment", "id": 38042926}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38030255.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38030255"}}, "parent": {"id": 37963384, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37963384.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37963384"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "I like that it lives with the other tests for the same componentizer. A single EmptyWorldTest would have to know about all componentizers to load them and make sure they didn't create any components. I think it's more likely I would forget to add a new componentizer to an EmptyWorldTest than not add a \"NoX\" componentizer tests.", "markup": "markdown", "html": "<p>I like that it lives with the other tests for the same componentizer. A single EmptyWorldTest would have to know about all componentizers to load them and make sure they didn't create any components. I think it's more likely I would forget to add a new componentizer to an EmptyWorldTest than not add a \"NoX\" componentizer tests.</p>", "type": "rendered"}, "created_on": "2017-06-01T16:09:40.376114+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-01T16:09:40.379783+00:00", "type": "pullrequest_comment", "id": 38030255}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38029707.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38029707"}}, "parent": {"id": 37953673, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37953673.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37953673"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Entities with no components should be auto-deleted (not done yet #23). The entities created here are are to make it convenient for componentizers to group related components.", "markup": "markdown", "html": "<p>Entities with no components should be auto-deleted (not done yet <a href=\"#!/osrf/gazebo_experimental/issues/23/if-an-entity-has-no-components-it-should\" rel=\"nofollow\" title=\"If an entity has no components it should be deleted\" class=\"ap-connect-link\">#23</a>). The entities created here are are to make it convenient for componentizers to group related components.</p>", "type": "rendered"}, "created_on": "2017-06-01T16:03:19.131057+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-01T16:03:38.428738+00:00", "type": "pullrequest_comment", "id": 38029707}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/38029361.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-38029361"}}, "parent": {"id": 37952421, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37952421.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37952421"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "A parent tag check would be good.\n\nIdeally there would be an xml schema defining these tags in an xml namespace. Then instead of checking the parent name, this code could check if this really is an SDF `<physics>` tag and not an unknown tag in a `<plugin>` block.", "markup": "markdown", "html": "<p>A parent tag check would be good.</p>\n<p>Ideally there would be an xml schema defining these tags in an xml namespace. Then instead of checking the parent name, this code could check if this really is an SDF <code>&lt;physics&gt;</code> tag and not an unknown tag in a <code>&lt;plugin&gt;</code> block.</p>", "type": "rendered"}, "created_on": "2017-06-01T15:59:31.359895+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-06-01T15:59:31.362091+00:00", "type": "pullrequest_comment", "id": 38029361}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37963384.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37963384"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "It seems like having a \"NoX\" test for each component type is going to produce a lot of extra, unnecessary tests. Perhaps they could all be combined into one \"EmptyWorldTest\"?\n", "markup": "markdown", "html": "<p>It seems like having a \"NoX\" test for each component type is going to produce a lot of extra, unnecessary tests. Perhaps they could all be combined into one \"EmptyWorldTest\"?</p>", "type": "rendered"}, "created_on": "2017-05-31T22:25:44.751647+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T22:25:44.754666+00:00", "type": "pullrequest_comment", "id": 37963384}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37957611.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37957611"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "I think this can be replaced by `!pluginName.empty()` with no performance change, and maybe it's clearer", "markup": "markdown", "html": "<p>I think this can be replaced by <code>!pluginName.empty()</code> with no performance change, and maybe it's clearer</p>", "type": "rendered"}, "created_on": "2017-05-31T20:35:14.553864+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T20:35:14.556488+00:00", "type": "pullrequest_comment", "id": 37957611}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37953673.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37953673"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "So every element in the SDF gets its own entity, even if it ends up with no components? I'm trying to conceptualize this--it seems like a lot of storage for what could be a very sparse amount of information, depending on how the SDF is structured.", "markup": "markdown", "html": "<p>So every element in the SDF gets its own entity, even if it ends up with no components? I'm trying to conceptualize this--it seems like a lot of storage for what could be a very sparse amount of information, depending on how the SDF is structured.</p>", "type": "rendered"}, "created_on": "2017-05-31T19:31:51.747462+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T19:31:51.750523+00:00", "type": "pullrequest_comment", "id": 37953673}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37952421.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37952421"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Should there be a check to make sure that the parent tag is of type `<world>`? In general, do there need to be parent tag type checks for every tag, as defined by the SDFormat spec?", "markup": "markdown", "html": "<p>Should there be a check to make sure that the parent tag is of type <code>&lt;world&gt;</code>? In general, do there need to be parent tag type checks for every tag, as defined by the SDFormat spec?</p>", "type": "rendered"}, "created_on": "2017-05-31T19:12:08.580161+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T19:12:08.582463+00:00", "type": "pullrequest_comment", "id": 37952421}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37952192.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37952192"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "In the same way, maybe mention the `<ambient>` tag explicitly here (although I suspect this conditional will be removed in the near future...)", "markup": "markdown", "html": "<p>In the same way, maybe mention the <code>&lt;ambient&gt;</code> tag explicitly here (although I suspect this conditional will be removed in the near future...)</p>", "type": "rendered"}, "created_on": "2017-05-31T19:08:08.454914+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T19:08:08.457196+00:00", "type": "pullrequest_comment", "id": 37952192}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37952102.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37952102"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "perhaps add a note that the parent must be `<visual>` to aid debugging, as in CZInertial.cc:48", "markup": "markdown", "html": "<p>perhaps add a note that the parent must be <code>&lt;visual&gt;</code> to aid debugging, as in CZInertial.cc:48</p>", "type": "rendered"}, "created_on": "2017-05-31T19:06:41.429769+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T19:06:41.431837+00:00", "type": "pullrequest_comment", "id": 37952102}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951925.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951925"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Pose -> Inertial?", "markup": "markdown", "html": "<p>Pose -&gt; Inertial?</p>", "type": "rendered"}, "created_on": "2017-05-31T19:04:13.338113+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T19:04:13.340123+00:00", "type": "pullrequest_comment", "id": 37951925}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951919.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951919"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Pose -> Collidable?", "markup": "markdown", "html": "<p>Pose -&gt; Collidable?</p>", "type": "rendered"}, "created_on": "2017-05-31T19:04:02.713399+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T19:04:02.723000+00:00", "type": "pullrequest_comment", "id": 37951919}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951799.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951799"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "collision -> inertial?", "markup": "markdown", "html": "<p>collision -&gt; inertial?</p>", "type": "rendered"}, "created_on": "2017-05-31T19:02:20.843023+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T19:02:20.846708+00:00", "type": "pullrequest_comment", "id": 37951799}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37951567.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37951567"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "I wonder if AttachX would be a better name for these functions, since the `_entity` is modified as a result of the call.", "markup": "markdown", "html": "<p>I wonder if AttachX would be a better name for these functions, since the <code>_entity</code> is modified as a result of the call.</p>", "type": "rendered"}, "created_on": "2017-05-31T18:58:34.975945+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T18:58:34.978530+00:00", "type": "pullrequest_comment", "id": 37951567}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37950534.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37950534"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "`\\return`?", "markup": "markdown", "html": "<p><code>\\return</code>?</p>", "type": "rendered"}, "created_on": "2017-05-31T18:43:02.948946+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T18:43:02.951461+00:00", "type": "pullrequest_comment", "id": 37950534}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30/comments/37949666.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30/_/diff#comment-37949666"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}, "content": {"raw": "Leftover from another file?", "markup": "markdown", "html": "<p>Leftover from another file?</p>", "type": "rendered"}, "created_on": "2017-05-31T18:30:15.993752+00:00", "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "inline": {}, "updated_on": "2017-05-31T18:30:15.996561+00:00", "type": "pullrequest_comment", "id": 37949666}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8097f37c9e7e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/8097f37c9e7e.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/8097f37c9e7e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-23T17:39:37.133092+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "afd0402b15b3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/afd0402b15b3.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/afd0402b15b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-23T16:15:43.451453+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6eeb4446c540", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6eeb4446c540.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6eeb4446c540"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-23T14:59:41.063881+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n**E1**\r\n\r\n* *Name: default* - created by `CZName`\r\n\r\n**E2**\r\n\r\n* *Name: asdf* - created by `CZName`\r\n* *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n* **E1**\r\n    * *Name: default* - created by `CZName`\r\n* **E2**\r\n    * *Name: asdf* - created by `CZName`\r\n    * *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n* **E3**\r\n    * *Name: model1* - created by `CZName`\r\n    * *Pose: origin in frame \"/\", defines frame \"/model/model1\"* - created by `CZPose`\r\n* **E4**\r\n    * *Name: link1* - created by `CZName`\r\n    * *Inertial: mass 5, inertia identity matrix* - created by `CZInertial`\r\n    * *WorldVelocity: initially zero* - created by `CZWorldVelocity`\r\n    * *Pose: origin in frame \"/model/model1\", defines frame \"/model/model1/link/link1\"* - created by `CZPose`\r\n* **E5**\r\n    * *Name: col1* - created by `CZName`\r\n    * *Geometry: box size 1,2,3* - created by `CZGeometry`\r\n    * *Collidable: groupId E4* - created by `CZCollidable`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/collision/col1\"* - created by `CZPose`\r\n* **E6**\r\n    * *Name vis1* - created by `CZName`\r\n    * *Geometry: sphere radius 0.5* - created by `CZGeometry`\r\n    * *Material; RGBA 0.1, 0.2, 0.3, 1.0* - created by `CZMaterial`\r\n    * *Pose: origin in frame \"/model/model1/link/link1\", defines frame \"/model/model1/link/link1/visual/vis1\"* - created by `CZPose`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6eeb4446c540", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6eeb4446c540.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6eeb4446c540"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-23T14:59:01.632073+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n**E1**\r\n\r\n* *Name: default* - created by `CZName`\r\n\r\n**E2**\r\n\r\n* *Name: asdf* - created by `CZName`\r\n* *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`\r\n\r\n\r\n## World with non-static model ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n    <model name=\"model1\">\r\n      <link name=\"link1\">\r\n        <collision name=\"col1\">\r\n          <geometry>\r\n            <box>\r\n              <size>1 2 3</size>\r\n            </box>\r\n          </geometry>\r\n        </collision>\r\n        <visual name=\"vis1\">\r\n          <geometry>\r\n            <sphere>\r\n              <radius>0.5</radius>\r\n            </sphere>\r\n          </geometry>\r\n          <material>\r\n            <ambient>0.1 0.2 0.3 1.0</ambient>\r\n          </material>\r\n        </visual>\r\n        <inertial>\r\n          <mass>5</mass>\r\n          <inertia>\r\n            <ixx>1</ixx>\r\n            <iyy>1</iyy>\r\n            <izz>1</izz>\r\n            <ixy>0</ixy>\r\n            <ixz>0</ixz>\r\n            <iyz>0</iyz>\r\n          </inertia>\r\n        </inertial>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n**Todo shane finish writing this example**", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6eeb4446c540", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6eeb4446c540.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6eeb4446c540"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T23:14:38.995149+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.\r\n\r\n\r\n# Examples #\r\n\r\n## Empty world ##\r\n```\r\n<sdf version=\"1.6\">\r\n  <world name=\"default\">\r\n    <physics name=\"asdf\" type=\"ode\">\r\n      <max_step_size>0.001</max_step_size>\r\n    </physics>\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nCreates these **Entities** and *components*\r\n\r\n**E1**\r\n\r\n* *Name: default* - created by `CZName`\r\n\r\n**E2**\r\n\r\n* *Name: asdf* - created by `CZName`\r\n* *PhysicsConfig: maxStepSize: 0.001* - created by `CZPhysicsConfig`", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6eeb4446c540", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6eeb4446c540.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6eeb4446c540"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T23:08:40.681560+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Ready to review. This pull request adds componentizers. These turn SDF into entities and components.\r\n\r\nComponentizers are loaded as plugins, and given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree breadth-first and invokes the componentizers one `sdf::Element` at at a time. This PR has a componentizer for each component type. There's nothing preventing a single componentizer from handling multiple component types, but one each seems to separate the code nicely.\r\n\r\nI prefixed the **C**omponenti**Z**ers with CZ so tabs in my editor weren't named the same as the component files.\r\n\r\n* Componentizers\r\n    * `CZName` adds a name component to anything that has an attribute 'name'\r\n    * `CZGeometry` adds a geometry component when it sees `<geometry>` under a `<collision>` or `<visual>`. It currently supports spheres, boxes, and cylinders only.\r\n    * `CZPose` adds a pose component when it sees a `<model>`, `<link>`, `<visual>`, or `<collision>`. The pose are given in the parent frame so that visuals move when the collision moves. See [this Jira ticket](https://osrfoundation.atlassian.net/browse/GAZ-141).\r\n    * `CZMaterial` Adds a material when a `<visual>` component is given. It currently only uses `<ambient>` to make a flat color material.\r\n    * `CZCollidable` creates a component when there is a `<collision>`. This signals that the `Geometry` component is collision geometry, and is grouped with other `<collision>` on the same link. This component should also have contact and surface properties, but that's not currently implemented\r\n    * `CZInertial` adds an interial component when there is one on a `<link>`. The `Collidable` component `groupId` references the entity this component is created on.\r\n    * `CZPhysicsConfig` adds a component for global `<physics>` properties. It only has `maxStepSize` currently.\r\n    * `CZWorldVelocity` if model is not static then the entities created for the `<link>` get `WorldVelocity` components.", "title": "Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6eeb4446c540", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6eeb4446c540.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6eeb4446c540"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T23:03:28.126072+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n* Componentizer tests", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6eeb4446c540", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/6eeb4446c540.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/6eeb4446c540"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T22:22:12.169448+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n* Componentizer tests", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cbdfc8ae1583", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/cbdfc8ae1583.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/cbdfc8ae1583"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T22:02:20.741454+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n* Componentizer tests", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "86483f476305", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/86483f476305.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/86483f476305"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T21:59:42.531181+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "86483f476305", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/86483f476305.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/86483f476305"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T21:57:36.631578+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "adb56158ca50", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/adb56158ca50.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/adb56158ca50"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4086a47c5ce5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/4086a47c5ce5.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/4086a47c5ce5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T21:47:29.169421+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b90eacb92702", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/b90eacb92702.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/b90eacb92702"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T19:16:44.147561+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd8117ae28b1", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/cd8117ae28b1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/cd8117ae28b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T17:52:54.407310+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0234b4cee400", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/0234b4cee400.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/0234b4cee400"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T17:40:49.032944+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "79fb1a7c5116", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/79fb1a7c5116.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/79fb1a7c5116"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T17:38:29.129771+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a5243c396843", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/a5243c396843.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/a5243c396843"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T16:21:50.998813+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "35d2b8a9069d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/35d2b8a9069d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/35d2b8a9069d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-22T16:02:00.203325+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "81376bdeecc6", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/81376bdeecc6.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/81376bdeecc6"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-19T23:09:58.318673+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}, {"update": {"description": "Working on adding componentizers. These turn SDF into entities and components.\r\n\r\nRight now the api loads componentizers as plugins. These are given to the `ecs::Manager` class. `Manager::LoadWorld(std::string _world)` gives walks the SDF tree and invokes the componentizers one `sdf::Element` at at a time.\r\n\r\nWorking\r\n\r\n* Load componentizers as plugins\r\n* Create `Name` components for named things\r\n* Create `Geometry` components for simple shapes\r\n* Create `Pose` components (replaces WorldPose, needs pose graph to be useful)\r\n* Create `Material` components for flat color only\r\n* Create `Collidable` components\r\n    * With a Geometry component it means it should be used by physics\r\n    * Attribute `group` is for combining multiple `<collision>` into a single rigid body\r\n* Create `Inertial` components\r\n* Create `PhysicsConfig` components for global physics info\r\n* Create `WorldVelocity` if model is not static\r\n\r\nTODO\r\n\r\n* Tests for componentizers", "title": "[WIP] Componentizers", "destination": {"commit": {"hash": "daa71ca6acd0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/daa71ca6acd0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/daa71ca6acd0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f9d01a4fc232", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/f9d01a4fc232.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/f9d01a4fc232"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "stub_componentizer"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-05-19T20:31:40.401843+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/30.json"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/30"}}, "title": "Componentizers"}}], "next": "data/repositories/osrf/gazebo_experimental/pullrequests/30/activity_ctx=jqueHaug.json"}