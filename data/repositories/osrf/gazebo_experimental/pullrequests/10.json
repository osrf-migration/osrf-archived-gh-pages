{"rendered": {"description": {"raw": "First pass at using gflags for command line parsing. Supports the flags `--version`, `--help`, `-h`.\r\n\r\nI had to do some basic restructuring - moved gz_ecs into a different filename, added some CMake plumbing to generate version information.\r\n\r\nI'm really not a fan of the way the built-in help and version messages are generated, so I replaced them with ones that matched Gazebo 8.\r\n\r\nFor reference, here's a comparison of the original gflags output with Gazebo 8's output:\r\n\r\n```\r\n#!bash\r\n\r\n$ gazebo8 -h\r\ngazebo -- Run the Gazebo server and GUI.\r\n\r\n`gazebo` [options] <world_file>\r\n\r\nGazebo server runs simulation and handles commandline options, starts a Master, runs World update and sensor generation loops. This also starts the Gazebo GUI client in a separate process.\r\n\r\nOptions:\r\n  -v [ --version ]              Output version information.\r\n  --verbose                     Increase the messages written to the terminal.\r\n  -h [ --help ]                 Produce this help message.\r\n  -u [ --pause ]                Start the server in a paused state.\r\n  -e [ --physics ] arg          Specify a physics engine (ode|bullet|dart|simbody).\r\n  -p [ --play ] arg             Play a log file.\r\n  -r [ --record ]               Record state data.\r\n  --record_encoding arg (=zlib) Compression encoding format for log data \r\n                                (zlib|bz2|txt).\r\n  --record_path arg             Absolute path in which to store state data.\r\n  --seed arg                    Start with a given random number seed.\r\n  --iters arg                   Number of iterations to simulate.\r\n  --minimal_comms               Reduce the TCP/IP traffic output by gazebo.\r\n  -g [ --gui-plugin ] arg       Load a GUI plugin.\r\n  -s [ --server-plugin ] arg    Load a server plugin.\r\n  -o [ --profile ] arg          Physics preset profile name from the options in\r\n                                the world file.\r\n\r\n\r\n\r\n\r\n$ ./gazebo -h\r\ngazebo: Run the Gazebo server and GUI.\r\n\r\n`gazebo` [options]\r\n\r\n  Flags from /home/adam/osrf/sandbox/gazebo_experimental/main.cc:\r\n    -h (--help, Print help message) type: bool default: false currently: true\r\n\r\n```", "markup": "markdown", "html": "<p>First pass at using gflags for command line parsing. Supports the flags <code>--version</code>, <code>--help</code>, <code>-h</code>.</p>\n<p>I had to do some basic restructuring - moved gz_ecs into a different filename, added some CMake plumbing to generate version information.</p>\n<p>I'm really not a fan of the way the built-in help and version messages are generated, so I replaced them with ones that matched Gazebo 8.</p>\n<p>For reference, here's a comparison of the original gflags output with Gazebo 8's output:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>$ gazebo8 -h\ngazebo -- Run the Gazebo server and GUI.\n\n<span class=\"sb\">`</span>gazebo<span class=\"sb\">`</span> <span class=\"o\">[</span>options<span class=\"o\">]</span> &lt;world_file&gt;\n\nGazebo server runs simulation and handles commandline options, starts a Master, runs World update and sensor generation loops. This also starts the Gazebo GUI client in a separate process.\n\nOptions:\n  -v <span class=\"o\">[</span> --version <span class=\"o\">]</span>              Output version information.\n  --verbose                     Increase the messages written to the terminal.\n  -h <span class=\"o\">[</span> --help <span class=\"o\">]</span>                 Produce this <span class=\"nb\">help</span> message.\n  -u <span class=\"o\">[</span> --pause <span class=\"o\">]</span>                Start the server in a paused state.\n  -e <span class=\"o\">[</span> --physics <span class=\"o\">]</span> arg          Specify a physics engine <span class=\"o\">(</span>ode<span class=\"p\">|</span>bullet<span class=\"p\">|</span>dart<span class=\"p\">|</span>simbody<span class=\"o\">)</span>.\n  -p <span class=\"o\">[</span> --play <span class=\"o\">]</span> arg             Play a log file.\n  -r <span class=\"o\">[</span> --record <span class=\"o\">]</span>               Record state data.\n  --record_encoding arg <span class=\"o\">(=</span>zlib<span class=\"o\">)</span> Compression encoding format <span class=\"k\">for</span> log data \n                                <span class=\"o\">(</span>zlib<span class=\"p\">|</span>bz2<span class=\"p\">|</span>txt<span class=\"o\">)</span>.\n  --record_path arg             Absolute path in which to store state data.\n  --seed arg                    Start with a given random number seed.\n  --iters arg                   Number of iterations to simulate.\n  --minimal_comms               Reduce the TCP/IP traffic output by gazebo.\n  -g <span class=\"o\">[</span> --gui-plugin <span class=\"o\">]</span> arg       Load a GUI plugin.\n  -s <span class=\"o\">[</span> --server-plugin <span class=\"o\">]</span> arg    Load a server plugin.\n  -o <span class=\"o\">[</span> --profile <span class=\"o\">]</span> arg          Physics preset profile name from the options in\n                                the world file.\n\n\n\n\n$ ./gazebo -h\ngazebo: Run the Gazebo server and GUI.\n\n<span class=\"sb\">`</span>gazebo<span class=\"sb\">`</span> <span class=\"o\">[</span>options<span class=\"o\">]</span>\n\n  Flags from /home/adam/osrf/sandbox/gazebo_experimental/main.cc:\n    -h <span class=\"o\">(</span>--help, Print <span class=\"nb\">help</span> message<span class=\"o\">)</span> type: bool default: <span class=\"nb\">false</span> currently: <span class=\"nb\">true</span>\n</pre></div>", "type": "rendered"}, "title": {"raw": "First pass at gflags command line argument parsing", "markup": "markdown", "html": "<p>First pass at gflags command line argument parsing</p>", "type": "rendered"}}, "type": "pullrequest", "description": "First pass at using gflags for command line parsing. Supports the flags `--version`, `--help`, `-h`.\r\n\r\nI had to do some basic restructuring - moved gz_ecs into a different filename, added some CMake plumbing to generate version information.\r\n\r\nI'm really not a fan of the way the built-in help and version messages are generated, so I replaced them with ones that matched Gazebo 8.\r\n\r\nFor reference, here's a comparison of the original gflags output with Gazebo 8's output:\r\n\r\n```\r\n#!bash\r\n\r\n$ gazebo8 -h\r\ngazebo -- Run the Gazebo server and GUI.\r\n\r\n`gazebo` [options] <world_file>\r\n\r\nGazebo server runs simulation and handles commandline options, starts a Master, runs World update and sensor generation loops. This also starts the Gazebo GUI client in a separate process.\r\n\r\nOptions:\r\n  -v [ --version ]              Output version information.\r\n  --verbose                     Increase the messages written to the terminal.\r\n  -h [ --help ]                 Produce this help message.\r\n  -u [ --pause ]                Start the server in a paused state.\r\n  -e [ --physics ] arg          Specify a physics engine (ode|bullet|dart|simbody).\r\n  -p [ --play ] arg             Play a log file.\r\n  -r [ --record ]               Record state data.\r\n  --record_encoding arg (=zlib) Compression encoding format for log data \r\n                                (zlib|bz2|txt).\r\n  --record_path arg             Absolute path in which to store state data.\r\n  --seed arg                    Start with a given random number seed.\r\n  --iters arg                   Number of iterations to simulate.\r\n  --minimal_comms               Reduce the TCP/IP traffic output by gazebo.\r\n  -g [ --gui-plugin ] arg       Load a GUI plugin.\r\n  -s [ --server-plugin ] arg    Load a server plugin.\r\n  -o [ --profile ] arg          Physics preset profile name from the options in\r\n                                the world file.\r\n\r\n\r\n\r\n\r\n$ ./gazebo -h\r\ngazebo: Run the Gazebo server and GUI.\r\n\r\n`gazebo` [options]\r\n\r\n  Flags from /home/adam/osrf/sandbox/gazebo_experimental/main.cc:\r\n    -h (--help, Print help message) type: bool default: false currently: true\r\n\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/10/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/diffstat/osrf/gazebo_experimental:f8d37635e53a%0D000abc8805a3?from_pullrequest_id=10"}, "commits": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/10/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/10.json"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/10/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/10/merge"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/10"}, "activity": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/10/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/diff/osrf/gazebo_experimental:f8d37635e53a%0D000abc8805a3?from_pullrequest_id=10"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/10/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/10/statuses_page=1.json"}}, "title": "First pass at gflags command line argument parsing", "close_source_branch": true, "reviewers": [], "id": 10, "destination": {"commit": {"hash": "000abc8805a3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/000abc8805a3.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/000abc8805a3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "created_on": "2017-04-18T16:21:44.261570+00:00", "summary": {"raw": "First pass at using gflags for command line parsing. Supports the flags `--version`, `--help`, `-h`.\r\n\r\nI had to do some basic restructuring - moved gz_ecs into a different filename, added some CMake plumbing to generate version information.\r\n\r\nI'm really not a fan of the way the built-in help and version messages are generated, so I replaced them with ones that matched Gazebo 8.\r\n\r\nFor reference, here's a comparison of the original gflags output with Gazebo 8's output:\r\n\r\n```\r\n#!bash\r\n\r\n$ gazebo8 -h\r\ngazebo -- Run the Gazebo server and GUI.\r\n\r\n`gazebo` [options] <world_file>\r\n\r\nGazebo server runs simulation and handles commandline options, starts a Master, runs World update and sensor generation loops. This also starts the Gazebo GUI client in a separate process.\r\n\r\nOptions:\r\n  -v [ --version ]              Output version information.\r\n  --verbose                     Increase the messages written to the terminal.\r\n  -h [ --help ]                 Produce this help message.\r\n  -u [ --pause ]                Start the server in a paused state.\r\n  -e [ --physics ] arg          Specify a physics engine (ode|bullet|dart|simbody).\r\n  -p [ --play ] arg             Play a log file.\r\n  -r [ --record ]               Record state data.\r\n  --record_encoding arg (=zlib) Compression encoding format for log data \r\n                                (zlib|bz2|txt).\r\n  --record_path arg             Absolute path in which to store state data.\r\n  --seed arg                    Start with a given random number seed.\r\n  --iters arg                   Number of iterations to simulate.\r\n  --minimal_comms               Reduce the TCP/IP traffic output by gazebo.\r\n  -g [ --gui-plugin ] arg       Load a GUI plugin.\r\n  -s [ --server-plugin ] arg    Load a server plugin.\r\n  -o [ --profile ] arg          Physics preset profile name from the options in\r\n                                the world file.\r\n\r\n\r\n\r\n\r\n$ ./gazebo -h\r\ngazebo: Run the Gazebo server and GUI.\r\n\r\n`gazebo` [options]\r\n\r\n  Flags from /home/adam/osrf/sandbox/gazebo_experimental/main.cc:\r\n    -h (--help, Print help message) type: bool default: false currently: true\r\n\r\n```", "markup": "markdown", "html": "<p>First pass at using gflags for command line parsing. Supports the flags <code>--version</code>, <code>--help</code>, <code>-h</code>.</p>\n<p>I had to do some basic restructuring - moved gz_ecs into a different filename, added some CMake plumbing to generate version information.</p>\n<p>I'm really not a fan of the way the built-in help and version messages are generated, so I replaced them with ones that matched Gazebo 8.</p>\n<p>For reference, here's a comparison of the original gflags output with Gazebo 8's output:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>$ gazebo8 -h\ngazebo -- Run the Gazebo server and GUI.\n\n<span class=\"sb\">`</span>gazebo<span class=\"sb\">`</span> <span class=\"o\">[</span>options<span class=\"o\">]</span> &lt;world_file&gt;\n\nGazebo server runs simulation and handles commandline options, starts a Master, runs World update and sensor generation loops. This also starts the Gazebo GUI client in a separate process.\n\nOptions:\n  -v <span class=\"o\">[</span> --version <span class=\"o\">]</span>              Output version information.\n  --verbose                     Increase the messages written to the terminal.\n  -h <span class=\"o\">[</span> --help <span class=\"o\">]</span>                 Produce this <span class=\"nb\">help</span> message.\n  -u <span class=\"o\">[</span> --pause <span class=\"o\">]</span>                Start the server in a paused state.\n  -e <span class=\"o\">[</span> --physics <span class=\"o\">]</span> arg          Specify a physics engine <span class=\"o\">(</span>ode<span class=\"p\">|</span>bullet<span class=\"p\">|</span>dart<span class=\"p\">|</span>simbody<span class=\"o\">)</span>.\n  -p <span class=\"o\">[</span> --play <span class=\"o\">]</span> arg             Play a log file.\n  -r <span class=\"o\">[</span> --record <span class=\"o\">]</span>               Record state data.\n  --record_encoding arg <span class=\"o\">(=</span>zlib<span class=\"o\">)</span> Compression encoding format <span class=\"k\">for</span> log data \n                                <span class=\"o\">(</span>zlib<span class=\"p\">|</span>bz2<span class=\"p\">|</span>txt<span class=\"o\">)</span>.\n  --record_path arg             Absolute path in which to store state data.\n  --seed arg                    Start with a given random number seed.\n  --iters arg                   Number of iterations to simulate.\n  --minimal_comms               Reduce the TCP/IP traffic output by gazebo.\n  -g <span class=\"o\">[</span> --gui-plugin <span class=\"o\">]</span> arg       Load a GUI plugin.\n  -s <span class=\"o\">[</span> --server-plugin <span class=\"o\">]</span> arg    Load a server plugin.\n  -o <span class=\"o\">[</span> --profile <span class=\"o\">]</span> arg          Physics preset profile name from the options in\n                                the world file.\n\n\n\n\n$ ./gazebo -h\ngazebo: Run the Gazebo server and GUI.\n\n<span class=\"sb\">`</span>gazebo<span class=\"sb\">`</span> <span class=\"o\">[</span>options<span class=\"o\">]</span>\n\n  Flags from /home/adam/osrf/sandbox/gazebo_experimental/main.cc:\n    -h <span class=\"o\">(</span>--help, Print <span class=\"nb\">help</span> message<span class=\"o\">)</span> type: bool default: <span class=\"nb\">false</span> currently: <span class=\"nb\">true</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "22f816dc2882", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/22f816dc2882.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/22f816dc2882"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "gflags"}}, "comment_count": 22, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-04-20T16:08:45.976154+00:00", "type": "participant", "approved": false, "user": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-20T15:35:57.523785+00:00", "type": "participant", "approved": true, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-20T18:19:21.044890+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-20T16:41:51.069223+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2017-04-20T18:19:32.355604+00:00", "author": {"display_name": "Adam Allevato", "uuid": "{7a39698c-2ebf-4713-b553-7a299c02fbae}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D"}, "html": {"href": "https://bitbucket.org/%7B7a39698c-2ebf-4713-b553-7a299c02fbae%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9cc2f72a-500b-4533-b881-68a2a8d47847/54e9a6bd-b12a-4280-a72a-5d6b984b7e3c/128"}}, "nickname": "adam_allevato", "type": "user", "account_id": "557058:9cc2f72a-500b-4533-b881-68a2a8d47847"}, "merge_commit": {"hash": "f8d37635e53a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/f8d37635e53a.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/f8d37635e53a"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}