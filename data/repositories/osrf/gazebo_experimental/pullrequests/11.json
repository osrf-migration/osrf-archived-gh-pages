{"rendered": {"description": {"raw": "I've been playing with the current system for the first time, great stuff! The \"dumb\" examples really help understand how things are meant to fit together in the future. As I was going through the code, I did a few things:\r\n\r\n* Commented and documented, hopefully this will help others. I know this was meant just as a rough draft, but I just commented things as I understood them, so it wasn't \"extra effort\".\r\n* Split the `RigidBody` component into two:\r\n    * `SphereGeom`: This could be used by other systems like rendering, for example\r\n    * `Inertial`: For now all this has is mass. But its presence also plays now the role of deciding whether an entity is static or not. So the `IsStatic` flag is gone. I thought this could be an interesting way to use components.\r\n* Added several `Sync` methods, split into `Internal` and `External`:\r\n    * `Internal` updates the internal representation specific to the system with information from the ECS\r\n    * `External` updates the ECS with results from the system\r\n\r\nThese are all just suggestions, even the documentation is incomplete. It's a selfish PR mostly for my benefit to see if I'm understanding things :)", "markup": "markdown", "html": "<p>I've been playing with the current system for the first time, great stuff! The \"dumb\" examples really help understand how things are meant to fit together in the future. As I was going through the code, I did a few things:</p>\n<ul>\n<li>Commented and documented, hopefully this will help others. I know this was meant just as a rough draft, but I just commented things as I understood them, so it wasn't \"extra effort\".</li>\n<li>Split the <code>RigidBody</code> component into two:<ul>\n<li><code>SphereGeom</code>: This could be used by other systems like rendering, for example</li>\n<li><code>Inertial</code>: For now all this has is mass. But its presence also plays now the role of deciding whether an entity is static or not. So the <code>IsStatic</code> flag is gone. I thought this could be an interesting way to use components.</li>\n</ul>\n</li>\n<li>Added several <code>Sync</code> methods, split into <code>Internal</code> and <code>External</code>:<ul>\n<li><code>Internal</code> updates the internal representation specific to the system with information from the ECS</li>\n<li><code>External</code> updates the ECS with results from the system</li>\n</ul>\n</li>\n</ul>\n<p>These are all just suggestions, even the documentation is incomplete. It's a selfish PR mostly for my benefit to see if I'm understanding things :)</p>", "type": "rendered"}, "title": {"raw": "Comments and a few proposals for DumbPhysics", "markup": "markdown", "html": "<p>Comments and a few proposals for DumbPhysics</p>", "type": "rendered"}}, "type": "pullrequest", "description": "I've been playing with the current system for the first time, great stuff! The \"dumb\" examples really help understand how things are meant to fit together in the future. As I was going through the code, I did a few things:\r\n\r\n* Commented and documented, hopefully this will help others. I know this was meant just as a rough draft, but I just commented things as I understood them, so it wasn't \"extra effort\".\r\n* Split the `RigidBody` component into two:\r\n    * `SphereGeom`: This could be used by other systems like rendering, for example\r\n    * `Inertial`: For now all this has is mass. But its presence also plays now the role of deciding whether an entity is static or not. So the `IsStatic` flag is gone. I thought this could be an interesting way to use components.\r\n* Added several `Sync` methods, split into `Internal` and `External`:\r\n    * `Internal` updates the internal representation specific to the system with information from the ECS\r\n    * `External` updates the ECS with results from the system\r\n\r\nThese are all just suggestions, even the documentation is incomplete. It's a selfish PR mostly for my benefit to see if I'm understanding things :)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/11/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/diffstat/osrf/gazebo_experimental:1b5be643ddec%0Df71153ba1ff0?from_pullrequest_id=11"}, "commits": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/11/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/11.json"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/11/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/11/merge"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/11"}, "activity": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/11/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/diff/osrf/gazebo_experimental:1b5be643ddec%0Df71153ba1ff0?from_pullrequest_id=11"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/11/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/11/statuses_page=1.json"}}, "title": "Comments and a few proposals for DumbPhysics", "close_source_branch": true, "reviewers": [], "id": 11, "destination": {"commit": {"hash": "f71153ba1ff0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/f71153ba1ff0.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/f71153ba1ff0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "created_on": "2017-04-18T16:32:43.798901+00:00", "summary": {"raw": "I've been playing with the current system for the first time, great stuff! The \"dumb\" examples really help understand how things are meant to fit together in the future. As I was going through the code, I did a few things:\r\n\r\n* Commented and documented, hopefully this will help others. I know this was meant just as a rough draft, but I just commented things as I understood them, so it wasn't \"extra effort\".\r\n* Split the `RigidBody` component into two:\r\n    * `SphereGeom`: This could be used by other systems like rendering, for example\r\n    * `Inertial`: For now all this has is mass. But its presence also plays now the role of deciding whether an entity is static or not. So the `IsStatic` flag is gone. I thought this could be an interesting way to use components.\r\n* Added several `Sync` methods, split into `Internal` and `External`:\r\n    * `Internal` updates the internal representation specific to the system with information from the ECS\r\n    * `External` updates the ECS with results from the system\r\n\r\nThese are all just suggestions, even the documentation is incomplete. It's a selfish PR mostly for my benefit to see if I'm understanding things :)", "markup": "markdown", "html": "<p>I've been playing with the current system for the first time, great stuff! The \"dumb\" examples really help understand how things are meant to fit together in the future. As I was going through the code, I did a few things:</p>\n<ul>\n<li>Commented and documented, hopefully this will help others. I know this was meant just as a rough draft, but I just commented things as I understood them, so it wasn't \"extra effort\".</li>\n<li>Split the <code>RigidBody</code> component into two:<ul>\n<li><code>SphereGeom</code>: This could be used by other systems like rendering, for example</li>\n<li><code>Inertial</code>: For now all this has is mass. But its presence also plays now the role of deciding whether an entity is static or not. So the <code>IsStatic</code> flag is gone. I thought this could be an interesting way to use components.</li>\n</ul>\n</li>\n<li>Added several <code>Sync</code> methods, split into <code>Internal</code> and <code>External</code>:<ul>\n<li><code>Internal</code> updates the internal representation specific to the system with information from the ECS</li>\n<li><code>External</code> updates the ECS with results from the system</li>\n</ul>\n</li>\n</ul>\n<p>These are all just suggestions, even the documentation is incomplete. It's a selfish PR mostly for my benefit to see if I'm understanding things :)</p>", "type": "rendered"}, "source": {"commit": {"hash": "a1e49c76b07d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/a1e49c76b07d.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/a1e49c76b07d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "comments"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-04-18T18:53:11.417234+00:00", "type": "participant", "approved": true, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-18T22:42:38.489524+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2017-04-18T22:43:17.987879+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "1b5be643ddec", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/1b5be643ddec.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/1b5be643ddec"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}