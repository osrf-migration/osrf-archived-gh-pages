{"rendered": {"description": {"raw": "This PR doesn't change any architecture. It adds a \"DummyPhysics\" system that uses a \"dummy_physics\" library. The purpose is to see how a physics system might use the current ECS architecture.\r\n\r\nTakeaways from this:\r\n\r\n* A physics system might have to iterate over components defining the bodies' shape, size, velocity, position twice. The first time is to get changes, and the second is to update them\r\n* There is a lot of copying/synchronizing data\r\n* A way to check if a component changed would save on some copying\r\n* How does the system find out about constraints/joints if it can only query entities with a fixed set of components? Does joint information need to be in the same component defining shape somehow?\r\n* Gravity, iterations, solver parameters are independent of bodies being simulated. How does the physics system get them?\r\n* Physics system can use EntityId to match to an internal representation", "markup": "markdown", "html": "<p>This PR doesn't change any architecture. It adds a \"DummyPhysics\" system that uses a \"dummy_physics\" library. The purpose is to see how a physics system might use the current ECS architecture.</p>\n<p>Takeaways from this:</p>\n<ul>\n<li>A physics system might have to iterate over components defining the bodies' shape, size, velocity, position twice. The first time is to get changes, and the second is to update them</li>\n<li>There is a lot of copying/synchronizing data</li>\n<li>A way to check if a component changed would save on some copying</li>\n<li>How does the system find out about constraints/joints if it can only query entities with a fixed set of components? Does joint information need to be in the same component defining shape somehow?</li>\n<li>Gravity, iterations, solver parameters are independent of bodies being simulated. How does the physics system get them?</li>\n<li>Physics system can use EntityId to match to an internal representation</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Adds demo with dummy physics", "markup": "markdown", "html": "<p>Adds demo with dummy physics</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR doesn't change any architecture. It adds a \"DummyPhysics\" system that uses a \"dummy_physics\" library. The purpose is to see how a physics system might use the current ECS architecture.\r\n\r\nTakeaways from this:\r\n\r\n* A physics system might have to iterate over components defining the bodies' shape, size, velocity, position twice. The first time is to get changes, and the second is to update them\r\n* There is a lot of copying/synchronizing data\r\n* A way to check if a component changed would save on some copying\r\n* How does the system find out about constraints/joints if it can only query entities with a fixed set of components? Does joint information need to be in the same component defining shape somehow?\r\n* Gravity, iterations, solver parameters are independent of bodies being simulated. How does the physics system get them?\r\n* Physics system can use EntityId to match to an internal representation", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/6/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/diffstat/osrf/gazebo_experimental:32bd7fe09efd%0Db812cadeebd1?from_pullrequest_id=6"}, "commits": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/6/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/6.json"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/6/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/6/merge"}, "html": {"href": "#!/osrf/gazebo_experimental/pull-requests/6"}, "activity": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/6/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/diff/osrf/gazebo_experimental:32bd7fe09efd%0Db812cadeebd1?from_pullrequest_id=6"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/pullrequests/6/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo_experimental/pullrequests/6/statuses_page=1.json"}}, "title": "Adds demo with dummy physics", "close_source_branch": true, "reviewers": [], "id": 6, "destination": {"commit": {"hash": "b812cadeebd1", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/b812cadeebd1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/b812cadeebd1"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "default"}}, "created_on": "2017-04-10T16:28:03.320921+00:00", "summary": {"raw": "This PR doesn't change any architecture. It adds a \"DummyPhysics\" system that uses a \"dummy_physics\" library. The purpose is to see how a physics system might use the current ECS architecture.\r\n\r\nTakeaways from this:\r\n\r\n* A physics system might have to iterate over components defining the bodies' shape, size, velocity, position twice. The first time is to get changes, and the second is to update them\r\n* There is a lot of copying/synchronizing data\r\n* A way to check if a component changed would save on some copying\r\n* How does the system find out about constraints/joints if it can only query entities with a fixed set of components? Does joint information need to be in the same component defining shape somehow?\r\n* Gravity, iterations, solver parameters are independent of bodies being simulated. How does the physics system get them?\r\n* Physics system can use EntityId to match to an internal representation", "markup": "markdown", "html": "<p>This PR doesn't change any architecture. It adds a \"DummyPhysics\" system that uses a \"dummy_physics\" library. The purpose is to see how a physics system might use the current ECS architecture.</p>\n<p>Takeaways from this:</p>\n<ul>\n<li>A physics system might have to iterate over components defining the bodies' shape, size, velocity, position twice. The first time is to get changes, and the second is to update them</li>\n<li>There is a lot of copying/synchronizing data</li>\n<li>A way to check if a component changed would save on some copying</li>\n<li>How does the system find out about constraints/joints if it can only query entities with a fixed set of components? Does joint information need to be in the same component defining shape somehow?</li>\n<li>Gravity, iterations, solver parameters are independent of bodies being simulated. How does the physics system get them?</li>\n<li>Physics system can use EntityId to match to an internal representation</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "537382f7e688", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/537382f7e688.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/537382f7e688"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "branch": {"name": "dumb_physics"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-04-14T21:27:06.989670+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}], "reason": "", "updated_on": "2017-04-14T21:27:48.815048+00:00", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "merge_commit": {"hash": "32bd7fe09efd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_experimental/commit/32bd7fe09efd.json"}, "html": {"href": "#!/osrf/gazebo_experimental/commits/32bd7fe09efd"}}}, "closed_by": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}