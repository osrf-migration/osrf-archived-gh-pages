{"pagelen": 100, "values": [{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/2/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/2/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/2/add-method-to-check-if-component-changed"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/2/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Add method to check if component changed since last time step", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently a system can query entities that have all required components. It gets a list of `EntityId` that match. This proposal is to add a way to see if a component on an entity has changed since the last update. It would mean :\r\n\r\n* Add a method `Entity::IsDifferent(ComponentType)` which returns 0 if the component was not modified, or a non-zero value indicating if the component was created, deleted, or just changed.\r\n* change `Entity::Component()` to return a pointer to a const object\r\n* Add `Entity::ComponentMutable()` to return a pointer to a non-const component for writing and set an internal flag that the component was modified\r\n* Add convenience methods using templates for the above.\r\n* Supporting changes in `Manager`, `EntityComponentDatabase`, and `EntityQuery`.\r\n\r\nThe purpose is to enable a system to update its internal state only if there have been changes. For example, a physics system would only change the shape of an object if the shape changed, or stop simulating a body if the component describing it was removed.\r\n\r\n\r\nExample\r\n\r\n```\r\n#!c++\r\n\r\nvoid MySystemUpdate(const EntityQuery &_query)\r\n{\r\n  for (EntityId id : _query->EntityIds())\r\n  {\r\n    auto e = manager->Entity(id);\r\n    switch (e.IsDifferent<components::WorldPose>())\r\n      {\r\n        case WAS_CREATED:\r\n          // add thing\r\n          break;\r\n        case WAS_DELETED:\r\n          // add thing\r\n          break;\r\n        case WAS_MODIFIED:\r\n          // add thing\r\n          break;\r\n         default: break;\r\n      }\r\n      // ...\r\n      if (needsChanging)\r\n      {\r\n        auto p = e.ComponentMutable<components::worldPose>();\r\n        // ...  Do changes\r\n      }\r\n      else\r\n      {\r\n        auto p = e.Component<components::WorldPose>();\r\n        // ... read only access to component\r\n      }\r\n  }\r\n}\r\n```", "markup": "markdown", "html": "<p>Currently a system can query entities that have all required components. It gets a list of <code>EntityId</code> that match. This proposal is to add a way to see if a component on an entity has changed since the last update. It would mean :</p>\n<ul>\n<li>Add a method <code>Entity::IsDifferent(ComponentType)</code> which returns 0 if the component was not modified, or a non-zero value indicating if the component was created, deleted, or just changed.</li>\n<li>change <code>Entity::Component()</code> to return a pointer to a const object</li>\n<li>Add <code>Entity::ComponentMutable()</code> to return a pointer to a non-const component for writing and set an internal flag that the component was modified</li>\n<li>Add convenience methods using templates for the above.</li>\n<li>Supporting changes in <code>Manager</code>, <code>EntityComponentDatabase</code>, and <code>EntityQuery</code>.</li>\n</ul>\n<p>The purpose is to enable a system to update its internal state only if there have been changes. For example, a physics system would only change the shape of an object if the shape changed, or stop simulating a body if the component describing it was removed.</p>\n<p>Example</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">MySystemUpdate</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">EntityQuery</span> <span class=\"o\">&amp;</span><span class=\"n\">_query</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">EntityId</span> <span class=\"nl\">id</span> <span class=\"p\">:</span> <span class=\"n\">_query</span><span class=\"o\">-&gt;</span><span class=\"n\">EntityIds</span><span class=\"p\">())</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">-&gt;</span><span class=\"n\">Entity</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">IsDifferent</span><span class=\"o\">&lt;</span><span class=\"n\">components</span><span class=\"o\">::</span><span class=\"n\">WorldPose</span><span class=\"o\">&gt;</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"nl\">WAS_CREATED</span><span class=\"p\">:</span>\n          <span class=\"c1\">// add thing</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"nl\">WAS_DELETED</span><span class=\"p\">:</span>\n          <span class=\"c1\">// add thing</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"nl\">WAS_MODIFIED</span><span class=\"p\">:</span>\n          <span class=\"c1\">// add thing</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n         <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// ...</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">needsChanging</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">ComponentMutable</span><span class=\"o\">&lt;</span><span class=\"n\">components</span><span class=\"o\">::</span><span class=\"n\">worldPose</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n        <span class=\"c1\">// ...  Do changes</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">else</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">Component</span><span class=\"o\">&lt;</span><span class=\"n\">components</span><span class=\"o\">::</span><span class=\"n\">WorldPose</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n        <span class=\"c1\">// ... read only access to component</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-10T17:32:03.073985+00:00", "milestone": null, "updated_on": "2017-04-14T21:28:45.478933+00:00", "type": "issue", "id": 2}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/3/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/3/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/3/manager-needs-unit-tests"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/3/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Manager needs unit tests", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The Manager class has no unit tests. This is a problem because this API is the primary API to interact with the ECS.", "markup": "markdown", "html": "<p>The Manager class has no unit tests. This is a problem because this API is the primary API to interact with the ECS.</p>", "type": "rendered"}, "assignee": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-12T16:58:00.293798+00:00", "milestone": null, "updated_on": "2017-04-20T18:47:28.923480+00:00", "type": "issue", "id": 3}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/4/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/4/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/4/entity-needs-unit-tests"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/4/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Entity needs unit tests", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The Entity class has no unit tests. This is a problem because this API is an important one for interacting with the ECS.", "markup": "markdown", "html": "<p>The Entity class has no unit tests. This is a problem because this API is an important one for interacting with the ECS.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-12T16:58:32.630507+00:00", "milestone": null, "updated_on": "2017-04-20T18:47:00.588741+00:00", "type": "issue", "id": 4}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/5/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/5/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/5/entities-components-queries-should-not"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/5/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Entities/Components/Queries should not change until after all systems are updated.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The description of pull request #8 describes another problem with the implementation: removing components invalidates other component pointers. This proposal is to solve the issue by freezing entities and components during the update, and applying any changes after. It would means a copy on write system for components.\r\n\r\n* When an entity is deleted the database will add it to a list to delete, and then delete it after all systems have been updated\r\n* When a component is deleted the database will add it to a list to delete, and then delete it after all systems have been updated\r\n* When a component is modified the database will return a copy of the component at new storage. After all systems are updated the database will overwrite the original storage with the changes.\r\n* When an entity is created the database will add it to a list and to new storage, then copy the storage to the main storage after all systems are updated\r\n* When an entity is deleted or created the queries won't update until after all systems are updated", "markup": "markdown", "html": "<p>The description of <a href=\"#!/osrf/gazebo_experimental/pull-requests/8/fixed-indices-not-being-updated-after\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #8</a> describes another problem with the implementation: removing components invalidates other component pointers. This proposal is to solve the issue by freezing entities and components during the update, and applying any changes after. It would means a copy on write system for components.</p>\n<ul>\n<li>When an entity is deleted the database will add it to a list to delete, and then delete it after all systems have been updated</li>\n<li>When a component is deleted the database will add it to a list to delete, and then delete it after all systems have been updated</li>\n<li>When a component is modified the database will return a copy of the component at new storage. After all systems are updated the database will overwrite the original storage with the changes.</li>\n<li>When an entity is created the database will add it to a list and to new storage, then copy the storage to the main storage after all systems are updated</li>\n<li>When an entity is deleted or created the queries won't update until after all systems are updated</li>\n</ul>", "type": "rendered"}, "assignee": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-12T19:08:35.888370+00:00", "milestone": null, "updated_on": "2017-04-14T21:28:27.303963+00:00", "type": "issue", "id": 5}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/6/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/6/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/6/add-a-readme"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/6/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Add a README", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Add a `README.md` file which should contain information such as how to:\r\n\r\n* Build\r\n* Install\r\n* Uninstall\r\n* Run tests\r\n* Run coverage\r\n* Run code checker\r\n* Generate documentation\r\n\r\nIt might also be interesting to have a \"quick start\" paragraph describing how to run the executable and what's the expected outcome.", "markup": "markdown", "html": "<p>Add a <code>README.md</code> file which should contain information such as how to:</p>\n<ul>\n<li>Build</li>\n<li>Install</li>\n<li>Uninstall</li>\n<li>Run tests</li>\n<li>Run coverage</li>\n<li>Run code checker</li>\n<li>Generate documentation</li>\n</ul>\n<p>It might also be interesting to have a \"quick start\" paragraph describing how to run the executable and what's the expected outcome.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-17T17:42:31.697494+00:00", "milestone": null, "updated_on": "2017-07-05T23:45:40.236749+00:00", "type": "issue", "id": 6}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/7/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/7/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/7/directory-structure"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/7/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Directory structure", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I'm opening this issue so we discuss and come up with the desired file structure for this project. Gazebo uses the following structure:\r\n\r\n~~~\r\n.\r\n\u251c\u2500\u2500 cmake\r\n\u251c\u2500\u2500 deps\r\n\u251c\u2500\u2500 doc\r\n\u251c\u2500\u2500 examples\r\n\u251c\u2500\u2500 gazebo\r\n\u2502   \u00a0\u00a0 \u251c\u2500\u2500 common\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 gui\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 math\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 msgs\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 physics\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 rendering\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 sensors\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 test\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u251c\u2500\u2500 transport\r\n\u2502      |       \u251c\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 *.hh\r\n\u2502      \u2514\u2500\u2500 util\r\n\u2502              \u251c\u2500\u2500 *.cc\r\n\u2502              \u2514\u2500\u2500 *.hh\r\n\u251c\u2500\u2500 interfaces\r\n\u251c\u2500\u2500 media\r\n\u251c\u2500\u2500 models\r\n\u251c\u2500\u2500 plugins\r\n\u251c\u2500\u2500 test\r\n\u251c\u2500\u2500 tools\r\n\u2514\u2500\u2500 worlds\r\n~~~\r\n\r\nWhile most recent projects such as SDFormat and Ignition use this:\r\n\r\n~~~\r\n.\r\n\u251c\u2500\u2500 cmake\r\n\u251c\u2500\u2500 doc\r\n\u251c\u2500\u2500 examples\r\n\u251c\u2500\u2500 include\r\n\u2502\u00a0\u00a0   \u2514\u2500\u2500 ignition\r\n\u2502\u00a0\u00a0           \u2514\u2500\u2500 <library_name>\r\n\u2502                       \u2514\u2500\u2500 *.hh\r\n\u251c\u2500\u2500 src\r\n\u2502      \u2514\u2500\u2500 *.cc\r\n\u251c\u2500\u2500 test\r\n\u2514\u2500\u2500 tools\r\n~~~\r\n\r\nHow about something like this here:\r\n\r\n~~~\r\n.\r\n\u251c\u2500\u2500 cmake\r\n\u251c\u2500\u2500 doc\r\n\u251c\u2500\u2500 examples\r\n\u251c\u2500\u2500 include\r\n\u2502     \u2514\u2500\u2500 gazebo\r\n\u2502             \u251c\u2500\u2500 ecs\r\n\u2502             |         \u251c\u2500\u2500 Manager.hh\r\n\u2502             |         \u251c\u2500\u2500 System.hh\r\n\u2502             |         \u251c\u2500\u2500 Entity.hh\r\n\u2502             |         \u2514\u2500\u2500 *.hh\r\n\u2502             \u251c\u2500\u2500 systems\r\n\u2502             |       \u251c\u2500\u2500 physics\r\n\u2502             |       |       \u2514\u2500\u2500 *.hh\r\n\u2502             |       \u251c\u2500\u2500 rendering\r\n\u2502             |       |       \u2514\u2500\u2500 *.hh\r\n\u2502             |       \u2514\u2500\u2500 <system_name>\r\n\u2502             |               \u2514\u2500\u2500 *.hh\r\n\u2502             \u251c\u2500\u2500 components\r\n\u2502             |         \u2514\u2500\u2500 *.hh\r\n\u2502             \u2514\u2500\u2500 <library_name>\r\n\u2502                       \u2514\u2500\u2500 *.hh\r\n\u251c\u2500\u2500 src\r\n\u2502      \u251c\u2500\u2500 ecs\r\n\u2502      |         \u251c\u2500\u2500 Manager.cc\r\n\u2502      |         \u251c\u2500\u2500 System.cc\r\n\u2502      |         \u251c\u2500\u2500 Entity.cc\r\n\u2502      |        \u2514\u2500\u2500 *.cc\r\n\u2502      \u251c\u2500\u2500 systems\r\n\u2502      |       \u251c\u2500\u2500 physics\r\n\u2502      |       |       \u2514\u2500\u2500 *.cc\r\n\u2502      |       \u251c\u2500\u2500 rendering\r\n\u2502      |       |       \u2514\u2500\u2500 *.cc\r\n\u2502      |       \u2514\u2500\u2500 <system_name>\r\n\u2502      |               \u2514\u2500\u2500 *.cc\r\n\u2502      \u2514\u2500\u2500 <library_name>\r\n\u2502               \u2514\u2500\u2500 *.cc\r\n\u251c\u2500\u2500 test\r\n\u2514\u2500\u2500 tools\r\n~~~", "markup": "markdown", "html": "<p>I'm opening this issue so we discuss and come up with the desired file structure for this project. Gazebo uses the following structure:</p>\n<div class=\"codehilite\"><pre><span></span>.\n\u251c\u2500\u2500 cmake\n\u251c\u2500\u2500 deps\n\u251c\u2500\u2500 doc\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 gazebo\n\u2502   \u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 gui\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 math\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 msgs\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 physics\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 rendering\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 sensors\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 test\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u251c\u2500\u2500 transport\n\u2502      |       \u251c\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 *.hh\n\u2502      \u2514\u2500\u2500 util\n\u2502              \u251c\u2500\u2500 *.cc\n\u2502              \u2514\u2500\u2500 *.hh\n\u251c\u2500\u2500 interfaces\n\u251c\u2500\u2500 media\n\u251c\u2500\u2500 models\n\u251c\u2500\u2500 plugins\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 tools\n\u2514\u2500\u2500 worlds\n</pre></div>\n\n\n<p>While most recent projects such as SDFormat and Ignition use this:</p>\n<div class=\"codehilite\"><pre><span></span>.\n\u251c\u2500\u2500 cmake\n\u251c\u2500\u2500 doc\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0   \u2514\u2500\u2500 ignition\n\u2502\u00a0\u00a0           \u2514\u2500\u2500 &lt;library_name&gt;\n\u2502                       \u2514\u2500\u2500 *.hh\n\u251c\u2500\u2500 src\n\u2502      \u2514\u2500\u2500 *.cc\n\u251c\u2500\u2500 test\n\u2514\u2500\u2500 tools\n</pre></div>\n\n\n<p>How about something like this here:</p>\n<div class=\"codehilite\"><pre><span></span>.\n\u251c\u2500\u2500 cmake\n\u251c\u2500\u2500 doc\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 include\n\u2502     \u2514\u2500\u2500 gazebo\n\u2502             \u251c\u2500\u2500 ecs\n\u2502             |         \u251c\u2500\u2500 Manager.hh\n\u2502             |         \u251c\u2500\u2500 System.hh\n\u2502             |         \u251c\u2500\u2500 Entity.hh\n\u2502             |         \u2514\u2500\u2500 *.hh\n\u2502             \u251c\u2500\u2500 systems\n\u2502             |       \u251c\u2500\u2500 physics\n\u2502             |       |       \u2514\u2500\u2500 *.hh\n\u2502             |       \u251c\u2500\u2500 rendering\n\u2502             |       |       \u2514\u2500\u2500 *.hh\n\u2502             |       \u2514\u2500\u2500 &lt;system_name&gt;\n\u2502             |               \u2514\u2500\u2500 *.hh\n\u2502             \u251c\u2500\u2500 components\n\u2502             |         \u2514\u2500\u2500 *.hh\n\u2502             \u2514\u2500\u2500 &lt;library_name&gt;\n\u2502                       \u2514\u2500\u2500 *.hh\n\u251c\u2500\u2500 src\n\u2502      \u251c\u2500\u2500 ecs\n\u2502      |         \u251c\u2500\u2500 Manager.cc\n\u2502      |         \u251c\u2500\u2500 System.cc\n\u2502      |         \u251c\u2500\u2500 Entity.cc\n\u2502      |        \u2514\u2500\u2500 *.cc\n\u2502      \u251c\u2500\u2500 systems\n\u2502      |       \u251c\u2500\u2500 physics\n\u2502      |       |       \u2514\u2500\u2500 *.cc\n\u2502      |       \u251c\u2500\u2500 rendering\n\u2502      |       |       \u2514\u2500\u2500 *.cc\n\u2502      |       \u2514\u2500\u2500 &lt;system_name&gt;\n\u2502      |               \u2514\u2500\u2500 *.cc\n\u2502      \u2514\u2500\u2500 &lt;library_name&gt;\n\u2502               \u2514\u2500\u2500 *.cc\n\u251c\u2500\u2500 test\n\u2514\u2500\u2500 tools\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-17T17:59:29.811196+00:00", "milestone": null, "updated_on": "2017-04-19T14:20:48.397532+00:00", "type": "issue", "id": 7}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/8/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/8.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/8/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/8/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/8/make-it-easy-for-a-system-to-know-current"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/8/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Make it easy for a system to know current simulation time", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Right now ECSystems are given the change in time between two time steps. This is useful, but it means every ECSystem has to add it to a counter every update to know the current simulation time. Because it's a floating point operation systems may over time drift on what they believe the current system time is.", "markup": "markdown", "html": "<p>Right now ECSystems are given the change in time between two time steps. This is useful, but it means every ECSystem has to add it to a counter every update to know the current simulation time. Because it's a floating point operation systems may over time drift on what they believe the current system time is.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-17T18:57:17.030047+00:00", "milestone": null, "updated_on": "2017-05-09T20:02:21.585407+00:00", "type": "issue", "id": 8}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/9/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/9.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/9/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/9/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/9/update-demo-to-use-systempaths"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/9/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Update demo to use SystemPaths", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The PR for the plugin loader changed. Now `SystemPaths` has the logic for searching for shared libraries. The two main files will need to change to support it.\r\n\r\nhttps://bitbucket.org/ignitionrobotics/ign-common/pull-requests/27", "markup": "markdown", "html": "<p>The PR for the plugin loader changed. Now <code>SystemPaths</code> has the logic for searching for shared libraries. The two main files will need to change to support it.</p>\n<p><a href=\"https://bitbucket.org/ignitionrobotics/ign-common/pull-requests/27\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/ignitionrobotics/ign-common/pull-requests/27</a></p>", "type": "rendered"}, "assignee": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-18T17:35:54.257935+00:00", "milestone": null, "updated_on": "2017-04-19T14:21:27.647924+00:00", "type": "issue", "id": 9}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/11/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/11.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/11/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/11/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/11/need-style-checker-script"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/11/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Need style checker script", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Need a script that checks for style errors like the \"tools/code_check.sh\" script on the main gazebo repo", "markup": "markdown", "html": "<p>Need a script that checks for style errors like the \"tools/code_check.sh\" script on the main gazebo repo</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-20T15:46:57.341490+00:00", "milestone": null, "updated_on": "2017-04-20T15:46:57.341490+00:00", "type": "issue", "id": 11}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/12/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/12.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/12/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/12/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/12/changes-to-simulation-time-to-support"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/12/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Changes to simulation time to support pausing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "An important feature of Gazebo is pausing a simulation and allowing the world to be changed. Currently the change in simulation time must be passed into `Manager::UpdateSystems()`. ECSystems are given a single variable `dt` which is the change in simulation time since the system was last called. This has it's own issues (see #8). This is a proposal to make the Manager class be the authority for simulation time.\r\n\r\nAdd\r\n\r\n* `ignition::common::Time Manager::SimulationTime()` returns the current sim time \r\n* `PauseLock Manager::Pause()` Simulation time is paused until all `PauseLock`s are destructed\r\n* `ignition::common::Duration` class to hold a change in time\r\n* `void Manager::SimulationTimeStep(ignition::common::Duration)` sets the time step for simulation\r\n\r\nChange\r\n\r\n* `void Manager::UpdateSystems(double _dt)` to `void Manager::UpdateSystems()`\r\n\r\n\r\nThe `PauseLock` increases a reference counter on construction and decreases it on destruction. It's purpose is to prevent systems running at the same time from pausing/unpausing and conflicting with each other. This solves an issue observed recently where someone wanted to synchronize gazebo with an external process by pausing it, but some unknown part of gazebo kept unpausing the simulation. This way the simulation only proceeds when all PauseLocks cease to exist.\r\n\r\nThe `Duration` would be an enhancement to ignition-common. It would probably be based on the ROS 1 roscpp Duration and methods would be added to `ignition::common::Time` to support adding and subtracting durations.", "markup": "markdown", "html": "<p>An important feature of Gazebo is pausing a simulation and allowing the world to be changed. Currently the change in simulation time must be passed into <code>Manager::UpdateSystems()</code>. ECSystems are given a single variable <code>dt</code> which is the change in simulation time since the system was last called. This has it's own issues (see <a href=\"#!/osrf/gazebo_experimental/issues/8/make-it-easy-for-a-system-to-know-current\" rel=\"nofollow\" title=\"Make it easy for a system to know current simulation time\" class=\"ap-connect-link\"><s>#8</s></a>). This is a proposal to make the Manager class be the authority for simulation time.</p>\n<p>Add</p>\n<ul>\n<li><code>ignition::common::Time Manager::SimulationTime()</code> returns the current sim time </li>\n<li><code>PauseLock Manager::Pause()</code> Simulation time is paused until all <code>PauseLock</code>s are destructed</li>\n<li><code>ignition::common::Duration</code> class to hold a change in time</li>\n<li><code>void Manager::SimulationTimeStep(ignition::common::Duration)</code> sets the time step for simulation</li>\n</ul>\n<p>Change</p>\n<ul>\n<li><code>void Manager::UpdateSystems(double _dt)</code> to <code>void Manager::UpdateSystems()</code></li>\n</ul>\n<p>The <code>PauseLock</code> increases a reference counter on construction and decreases it on destruction. It's purpose is to prevent systems running at the same time from pausing/unpausing and conflicting with each other. This solves an issue observed recently where someone wanted to synchronize gazebo with an external process by pausing it, but some unknown part of gazebo kept unpausing the simulation. This way the simulation only proceeds when all PauseLocks cease to exist.</p>\n<p>The <code>Duration</code> would be an enhancement to ignition-common. It would probably be based on the ROS 1 roscpp Duration and methods would be added to <code>ignition::common::Time</code> to support adding and subtracting durations.</p>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": null, "edited_on": null, "created_on": "2017-04-20T18:28:56.483121+00:00", "milestone": null, "updated_on": "2017-04-25T20:21:51.130401+00:00", "type": "issue", "id": 12}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/14/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/14.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/14/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/14/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/14/interface-for-dynamically-loading"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/14/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Interface for dynamically loading / unloading plugins", "component": null, "votes": 0, "watches": 1, "content": {"raw": "It would be nice to have an interface (maybe through ignition transport?) which can be used to tell the ECS to load a new plugin. \r\n\r\nThis could be used by any external process, such as a command line tool for example, to load a system on its behalf, and unload when it is done.\r\n\r\nI imagine this interface would be a wrapper around a C++ interface which can be used to programatically load plugins.", "markup": "markdown", "html": "<p>It would be nice to have an interface (maybe through ignition transport?) which can be used to tell the ECS to load a new plugin. </p>\n<p>This could be used by any external process, such as a command line tool for example, to load a system on its behalf, and unload when it is done.</p>\n<p>I imagine this interface would be a wrapper around a C++ interface which can be used to programatically load plugins.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-27T17:40:43.924356+00:00", "milestone": null, "updated_on": "2017-04-27T17:40:43.924356+00:00", "type": "issue", "id": 14}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/15/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/15.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/15/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/15/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/15/rendering-system-using-ign-rendering"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/15/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Rendering system using ign-rendering", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Part of this sprint is to create a rendering ECS system that uses ignition-rendering. There is a dummy rendering system in the examples directory shows how a rendering system might be structured.", "markup": "markdown", "html": "<p>Part of this sprint is to create a rendering ECS system that uses ignition-rendering. There is a dummy rendering system in the examples directory shows how a rendering system might be structured.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-28T17:07:06.653257+00:00", "milestone": null, "updated_on": "2017-04-28T17:07:06.653257+00:00", "type": "issue", "id": 15}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/16/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/16.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/16/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/16/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/16/add-time-taken-metrics-and-a-way-to-view"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/16/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Add time taken metrics and a way to view them in real time", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Having a way to see timing information in real time will be useful for future debugging and profiling. Useful metrics are\r\n\r\n1. How long is each system taking to update?\r\n2. How long is it taking to update all systems?\r\n3. How long is it taking to apply changes to the entities and components?\r\n\r\nThis kind of information would inform decisions about where time should be spent optimizing code, or where bugs might be occurring.", "markup": "markdown", "html": "<p>Having a way to see timing information in real time will be useful for future debugging and profiling. Useful metrics are</p>\n<ol>\n<li>How long is each system taking to update?</li>\n<li>How long is it taking to update all systems?</li>\n<li>How long is it taking to apply changes to the entities and components?</li>\n</ol>\n<p>This kind of information would inform decisions about where time should be spent optimizing code, or where bugs might be occurring.</p>", "type": "rendered"}, "assignee": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-28T17:50:01.098342+00:00", "milestone": null, "updated_on": "2017-05-18T16:20:20.719254+00:00", "type": "issue", "id": 16}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/19/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/19.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/19/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/19/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/19/create-viewer-for-viewing-all-entities-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/19/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Create viewer for viewing all entities and components", "component": null, "votes": 0, "watches": 1, "content": {"raw": "For debugging purposes it will be useful to have a way to see all entities and the components they have. Create a way to view that information in real time", "markup": "markdown", "html": "<p>For debugging purposes it will be useful to have a way to see all entities and the components they have. Create a way to view that information in real time</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-01T21:35:15.116033+00:00", "milestone": null, "updated_on": "2017-07-05T18:07:59.166849+00:00", "type": "issue", "id": 19}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/20/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/20.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/20/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/20/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/20/if-two-systems-modify-a-component-the"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/20/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "If two systems modify a component the higher priority system should have priority", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently it is possible for two systems to modify the same component in the same update. It should be clearly defined which modification will be present in the next update. For example if both the user and the physics engine moves an object, the user's move should be the accepted change.", "markup": "markdown", "html": "<p>Currently it is possible for two systems to modify the same component in the same update. It should be clearly defined which modification will be present in the next update. For example if both the user and the physics engine moves an object, the user's move should be the accepted change.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-01T21:48:08.653971+00:00", "milestone": null, "updated_on": "2017-06-29T17:43:05.902708+00:00", "type": "issue", "id": 20}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/21/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/21.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/21/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/21/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/21/systems-need-a-way-to-tell-if-a-change-was"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/21/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Systems need a way to tell if a change was caused by them or another system", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If a system can determine if a change was made by itself or another system then it can avoid copying changes it made back into itself. For example the the physics system needs to update itself when an object is moved, but if it relies on checking `WAS_MODIFIED` then it will still update itself even if it was the last to move an object.", "markup": "markdown", "html": "<p>If a system can determine if a change was made by itself or another system then it can avoid copying changes it made back into itself. For example the the physics system needs to update itself when an object is moved, but if it relies on checking <code>WAS_MODIFIED</code> then it will still update itself even if it was the last to move an object.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-01T21:52:56.946508+00:00", "milestone": null, "updated_on": "2017-05-01T21:52:56.946508+00:00", "type": "issue", "id": 21}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/22/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/22.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/22/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/22/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/22/entitycomponentdatabase-method-of-making"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/22/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "EntityComponentDatabase method of making components immutable is flawed", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Systems are given an immutable state (entities, components). Any changes an ECS system makes are copied and applied later. The manor in which the ECS core code makes sure components are immutable is flawed if the component contains a pointer. The problem is due to the copier stored with the component type.\r\n\r\nStep 1 and 2 happen while the ECS systems are updating. Step 3 happens after all ECS systems have updated.\r\n\r\n![system_modifies_component.png](data/bitbucket.org/repo/baqryA7/images/3140240510-system_modifies_component.png)\r\n\r\nThe problem is ComponentTypeInfo.copier() does a shallow copy. Consider a component with an `std::string name` in it. One ECS system changes the name. In the same update another ECS system reads the name. The name read by the second ECS system depends on whether it happens before or after the first system modified it. This makes the simulation less deterministic, and could potentially crash if both systems ran at the same time.\r\n\r\nOne solution is to have `ComponentTypeInfo.copier()` store the component's copy constructor. It would be up to the author of the component to make sure the copy constructor does a deep copy. Currently the database does not call the destructor on the modified storage in step 3, but it would need to do so with this change.", "markup": "markdown", "html": "<p>Systems are given an immutable state (entities, components). Any changes an ECS system makes are copied and applied later. The manor in which the ECS core code makes sure components are immutable is flawed if the component contains a pointer. The problem is due to the copier stored with the component type.</p>\n<p>Step 1 and 2 happen while the ECS systems are updating. Step 3 happens after all ECS systems have updated.</p>\n<p><img alt=\"system_modifies_component.png\" src=\"data/bitbucket.org/repo/baqryA7/images/3140240510-system_modifies_component.png\" /></p>\n<p>The problem is ComponentTypeInfo.copier() does a shallow copy. Consider a component with an <code>std::string name</code> in it. One ECS system changes the name. In the same update another ECS system reads the name. The name read by the second ECS system depends on whether it happens before or after the first system modified it. This makes the simulation less deterministic, and could potentially crash if both systems ran at the same time.</p>\n<p>One solution is to have <code>ComponentTypeInfo.copier()</code> store the component's copy constructor. It would be up to the author of the component to make sure the copy constructor does a deep copy. Currently the database does not call the destructor on the modified storage in step 3, but it would need to do so with this change.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-05-09T17:19:52.085938+00:00", "milestone": null, "updated_on": "2017-05-18T16:19:28.440627+00:00", "type": "issue", "id": 22}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/23/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/23.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/23/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/23/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/23/if-an-entity-has-no-components-it-should"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/23/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "If an entity has no components it should be deleted", "component": null, "votes": 0, "watches": 1, "content": {"raw": "An entity without components is useless. When the database updates any entities that have zero components should be deleted.", "markup": "markdown", "html": "<p>An entity without components is useless. When the database updates any entities that have zero components should be deleted.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-12T19:14:30.332088+00:00", "milestone": null, "updated_on": "2017-05-12T19:14:30.332088+00:00", "type": "issue", "id": 23}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/24/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/24.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/24/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/24/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/24/if-a-callback-with-an-empty-entityquery-is"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/24/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "If a callback with an empty EntityQuery is registered, the registration should be ignored", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Adding an `EntityQuery` with no component types still leads to the callback being called, but there's no useful work it could do. The `QueryRegistrar` should return false if an empty `EntityQuery` is given.", "markup": "markdown", "html": "<p>Adding an <code>EntityQuery</code> with no component types still leads to the callback being called, but there's no useful work it could do. The <code>QueryRegistrar</code> should return false if an empty <code>EntityQuery</code> is given.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-18T16:19:01.789514+00:00", "milestone": null, "updated_on": "2017-07-05T22:34:33.163071+00:00", "type": "issue", "id": 24}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/25/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/25.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/25/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/25/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/25/components-should-use-pimpl-pattern-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/25/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Components should use PIMPL pattern to avoid ABI breakage during updates", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently components are structs/unions that expose their member variables directly. This is great for speed of reading/writing from them, but means any changes to a component will break ABI. Components should use the PIMPL pattern or something similar so that maintenance isn't a difficult issue in the future.", "markup": "markdown", "html": "<p>Currently components are structs/unions that expose their member variables directly. This is great for speed of reading/writing from them, but means any changes to a component will break ABI. Components should use the PIMPL pattern or something similar so that maintenance isn't a difficult issue in the future.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-05T15:05:49.970623+00:00", "milestone": null, "updated_on": "2017-07-05T23:47:25.705881+00:00", "type": "issue", "id": 25}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/27/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/27.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/27/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/27/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/27/dummy-physics-system-should-be-part-of"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/27/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Dummy physics system should be part of main executable", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Dummy physics should be run in the main executable so that there is something modifying components. This would allow development of other systems that use the physics data. Eventually this dummy physics system will be replaced by a system using ign-physics", "markup": "markdown", "html": "<p>Dummy physics should be run in the main executable so that there is something modifying components. This would allow development of other systems that use the physics data. Eventually this dummy physics system will be replaced by a system using ign-physics</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-05T15:11:03.673035+00:00", "milestone": null, "updated_on": "2017-07-05T23:46:34.391561+00:00", "type": "issue", "id": 27}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/29/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/29.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/29/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/29/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/29/determine-if-typeid-works-accross-dll"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/29/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Determine if typeid works accross DLL boundaries on windows", "component": null, "votes": 0, "watches": 1, "content": {"raw": "There seem to be a lot of mentions that RTTI/typeid() does not work accross DLL boundaries on windows. If that's the case most APIs on `Entity`, `EntityComponentDatabase`, and `EntityQuery` have to change.\r\n\r\nI've done some googling, but haven't found conclusive documentation. Testing this would be a good idea.", "markup": "markdown", "html": "<p>There seem to be a lot of mentions that RTTI/typeid() does not work accross DLL boundaries on windows. If that's the case most APIs on <code>Entity</code>, <code>EntityComponentDatabase</code>, and <code>EntityQuery</code> have to change.</p>\n<p>I've done some googling, but haven't found conclusive documentation. Testing this would be a good idea.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-06T17:33:00.615714+00:00", "milestone": null, "updated_on": "2017-06-06T17:33:00.615714+00:00", "type": "issue", "id": 29}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/30/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/30.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/30/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/30/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/30/sdf-componentizer-fromsdf-should-accept"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/30/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "SDF Componentizer FromSDF should accept constant SDF element", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently componentizers get a mutable reference to each SDF element. They shouldn't be modifying the SDF, so that param should become const.", "markup": "markdown", "html": "<p>Currently componentizers get a mutable reference to each SDF element. They shouldn't be modifying the SDF, so that param should become const.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-07-05T18:16:32.626339+00:00", "milestone": null, "updated_on": "2017-07-05T18:16:32.626339+00:00", "type": "issue", "id": 30}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/31/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/31.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/31/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/31/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/31/generate-test-config-file"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/31/vote"}}, "reporter": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "title": "Generate test config file", "component": null, "votes": 0, "watches": 1, "content": {"raw": "e.g. with cmake using `configure_file` from `test_config.h.in` that contains paths to test directories so we can run tests from any location.", "markup": "markdown", "html": "<p>e.g. with cmake using <code>configure_file</code> from <code>test_config.h.in</code> that contains paths to test directories so we can run tests from any location.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-07-17T19:11:13.887651+00:00", "milestone": null, "updated_on": "2017-07-17T19:11:13.887651+00:00", "type": "issue", "id": 31}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/32/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/32.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/32/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/32/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/32/install-official-plugins-in-places-where"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/32/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Install official plugins in places where they can be found", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Right now, there is a need to manually set environment variables after building and installing. Eventually, we should make sure Gazebo can find all the plugins that it ships without further configuration.\r\n\r\nFrom the current README:\r\n\r\n~~~\r\nSet environment variables. Assuming you're in the build/ folder:\r\n\r\nexport GAZEBO_PLUGIN_PATH=$LD_LIBRARY_PATH\r\nexport IGN_GUI_PLUGIN_PATH=src/gui\r\n~~~", "markup": "markdown", "html": "<p>Right now, there is a need to manually set environment variables after building and installing. Eventually, we should make sure Gazebo can find all the plugins that it ships without further configuration.</p>\n<p>From the current README:</p>\n<div class=\"codehilite\"><pre><span></span>Set environment variables. Assuming you&#39;re in the build/ folder:\n\nexport GAZEBO_PLUGIN_PATH=$LD_LIBRARY_PATH\nexport IGN_GUI_PLUGIN_PATH=src/gui\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-07-18T01:31:47.677618+00:00", "milestone": null, "updated_on": "2017-09-06T22:56:46.924671+00:00", "type": "issue", "id": 32}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/36/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/36.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/36/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/36/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/36/doesnt-build-against-latest-ign-rendering"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/36/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Doesn't build against latest ign-rendering", "component": null, "votes": 0, "watches": 1, "content": {"raw": "~~~\r\n/home/louise/code/gazebo_experimental/src/systems/rendering/RenderSystem.cc: In member function \u2018void gazebo::systems::RenderSystem::Update(const gazebo::ecs::EntityQuery&)\u2019:\r\n/home/louise/code/gazebo_experimental/src/systems/rendering/RenderSystem.cc:109:21: error: \u2018class ignition::rendering::Camera\u2019 has no member named \u2018ImageDepth\u2019\r\n       this->camera->ImageDepth());\r\n                     ^\r\n/home/louise/code/gazebo_experimental/src/systems/rendering/RenderSystem.cc:113:21: error: \u2018class ignition::rendering::Camera\u2019 has no member named \u2018ImageDepth\u2019\r\n       this->camera->ImageDepth());\r\n                     ^\r\n/home/louise/code/gazebo_experimental/src/systems/rendering/RenderSystem.cc: In member function \u2018ignition::rendering::CameraPtr gazebo::systems::RenderSystem::LoadEngine(const string&)\u2019:\r\n/home/louise/code/gazebo_experimental/src/systems/rendering/RenderSystem.cc:125:7: error: \u2018get_engine\u2019 is not a member of \u2018ignition::rendering\u2019\r\n       ignition::rendering::get_engine(_engineName);\r\n~~~", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">/</span><span class=\"nt\">home</span><span class=\"o\">/</span><span class=\"nt\">louise</span><span class=\"o\">/</span><span class=\"nt\">code</span><span class=\"o\">/</span><span class=\"nt\">gazebo_experimental</span><span class=\"o\">/</span><span class=\"nt\">src</span><span class=\"o\">/</span><span class=\"nt\">systems</span><span class=\"o\">/</span><span class=\"nt\">rendering</span><span class=\"o\">/</span><span class=\"nt\">RenderSystem</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"o\">:</span> <span class=\"nt\">In</span> <span class=\"nt\">member</span> <span class=\"nt\">function</span> <span class=\"err\">\u2018</span><span class=\"nt\">void</span> <span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">systems</span><span class=\"p\">::</span><span class=\"nd\">RenderSystem</span><span class=\"p\">::</span><span class=\"nd\">Update</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">ecs</span><span class=\"p\">::</span><span class=\"nd\">EntityQuery</span><span class=\"o\">&amp;)</span><span class=\"err\">\u2019</span><span class=\"o\">:</span>\n<span class=\"o\">/</span><span class=\"nt\">home</span><span class=\"o\">/</span><span class=\"nt\">louise</span><span class=\"o\">/</span><span class=\"nt\">code</span><span class=\"o\">/</span><span class=\"nt\">gazebo_experimental</span><span class=\"o\">/</span><span class=\"nt\">src</span><span class=\"o\">/</span><span class=\"nt\">systems</span><span class=\"o\">/</span><span class=\"nt\">rendering</span><span class=\"o\">/</span><span class=\"nt\">RenderSystem</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">109</span><span class=\"p\">:</span><span class=\"nd\">21</span><span class=\"o\">:</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"err\">\u2018</span><span class=\"nt\">class</span> <span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">rendering</span><span class=\"p\">::</span><span class=\"nd\">Camera</span><span class=\"err\">\u2019</span> <span class=\"nt\">has</span> <span class=\"nt\">no</span> <span class=\"nt\">member</span> <span class=\"nt\">named</span> <span class=\"err\">\u2018</span><span class=\"nt\">ImageDepth</span><span class=\"err\">\u2019</span>\n       <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera-</span><span class=\"o\">&gt;</span><span class=\"nt\">ImageDepth</span><span class=\"o\">());</span>\n                     <span class=\"o\">^</span>\n<span class=\"o\">/</span><span class=\"nt\">home</span><span class=\"o\">/</span><span class=\"nt\">louise</span><span class=\"o\">/</span><span class=\"nt\">code</span><span class=\"o\">/</span><span class=\"nt\">gazebo_experimental</span><span class=\"o\">/</span><span class=\"nt\">src</span><span class=\"o\">/</span><span class=\"nt\">systems</span><span class=\"o\">/</span><span class=\"nt\">rendering</span><span class=\"o\">/</span><span class=\"nt\">RenderSystem</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">113</span><span class=\"p\">:</span><span class=\"nd\">21</span><span class=\"o\">:</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"err\">\u2018</span><span class=\"nt\">class</span> <span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">rendering</span><span class=\"p\">::</span><span class=\"nd\">Camera</span><span class=\"err\">\u2019</span> <span class=\"nt\">has</span> <span class=\"nt\">no</span> <span class=\"nt\">member</span> <span class=\"nt\">named</span> <span class=\"err\">\u2018</span><span class=\"nt\">ImageDepth</span><span class=\"err\">\u2019</span>\n       <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera-</span><span class=\"o\">&gt;</span><span class=\"nt\">ImageDepth</span><span class=\"o\">());</span>\n                     <span class=\"o\">^</span>\n<span class=\"o\">/</span><span class=\"nt\">home</span><span class=\"o\">/</span><span class=\"nt\">louise</span><span class=\"o\">/</span><span class=\"nt\">code</span><span class=\"o\">/</span><span class=\"nt\">gazebo_experimental</span><span class=\"o\">/</span><span class=\"nt\">src</span><span class=\"o\">/</span><span class=\"nt\">systems</span><span class=\"o\">/</span><span class=\"nt\">rendering</span><span class=\"o\">/</span><span class=\"nt\">RenderSystem</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"o\">:</span> <span class=\"nt\">In</span> <span class=\"nt\">member</span> <span class=\"nt\">function</span> <span class=\"err\">\u2018</span><span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">rendering</span><span class=\"p\">::</span><span class=\"nd\">CameraPtr</span> <span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">systems</span><span class=\"p\">::</span><span class=\"nd\">RenderSystem</span><span class=\"p\">::</span><span class=\"nd\">LoadEngine</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">string</span><span class=\"o\">&amp;)</span><span class=\"err\">\u2019</span><span class=\"o\">:</span>\n<span class=\"o\">/</span><span class=\"nt\">home</span><span class=\"o\">/</span><span class=\"nt\">louise</span><span class=\"o\">/</span><span class=\"nt\">code</span><span class=\"o\">/</span><span class=\"nt\">gazebo_experimental</span><span class=\"o\">/</span><span class=\"nt\">src</span><span class=\"o\">/</span><span class=\"nt\">systems</span><span class=\"o\">/</span><span class=\"nt\">rendering</span><span class=\"o\">/</span><span class=\"nt\">RenderSystem</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">125</span><span class=\"p\">:</span><span class=\"nd\">7</span><span class=\"o\">:</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"err\">\u2018</span><span class=\"nt\">get_engine</span><span class=\"err\">\u2019</span> <span class=\"nt\">is</span> <span class=\"nt\">not</span> <span class=\"nt\">a</span> <span class=\"nt\">member</span> <span class=\"nt\">of</span> <span class=\"err\">\u2018</span><span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">rendering</span><span class=\"err\">\u2019</span>\n       <span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">rendering</span><span class=\"p\">::</span><span class=\"nd\">get_engine</span><span class=\"o\">(</span><span class=\"nt\">_engineName</span><span class=\"o\">);</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-09-06T21:58:02.981838+00:00", "milestone": null, "updated_on": "2017-09-07T00:13:28.792893+00:00", "type": "issue", "id": 36}], "page": 1, "size": 26}