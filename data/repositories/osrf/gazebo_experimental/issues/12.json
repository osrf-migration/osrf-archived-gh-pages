{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/12/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/12.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/12/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/12/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/12/changes-to-simulation-time-to-support"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/12/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Changes to simulation time to support pausing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "An important feature of Gazebo is pausing a simulation and allowing the world to be changed. Currently the change in simulation time must be passed into `Manager::UpdateSystems()`. ECSystems are given a single variable `dt` which is the change in simulation time since the system was last called. This has it's own issues (see #8). This is a proposal to make the Manager class be the authority for simulation time.\r\n\r\nAdd\r\n\r\n* `ignition::common::Time Manager::SimulationTime()` returns the current sim time \r\n* `PauseLock Manager::Pause()` Simulation time is paused until all `PauseLock`s are destructed\r\n* `ignition::common::Duration` class to hold a change in time\r\n* `void Manager::SimulationTimeStep(ignition::common::Duration)` sets the time step for simulation\r\n\r\nChange\r\n\r\n* `void Manager::UpdateSystems(double _dt)` to `void Manager::UpdateSystems()`\r\n\r\n\r\nThe `PauseLock` increases a reference counter on construction and decreases it on destruction. It's purpose is to prevent systems running at the same time from pausing/unpausing and conflicting with each other. This solves an issue observed recently where someone wanted to synchronize gazebo with an external process by pausing it, but some unknown part of gazebo kept unpausing the simulation. This way the simulation only proceeds when all PauseLocks cease to exist.\r\n\r\nThe `Duration` would be an enhancement to ignition-common. It would probably be based on the ROS 1 roscpp Duration and methods would be added to `ignition::common::Time` to support adding and subtracting durations.", "markup": "markdown", "html": "<p>An important feature of Gazebo is pausing a simulation and allowing the world to be changed. Currently the change in simulation time must be passed into <code>Manager::UpdateSystems()</code>. ECSystems are given a single variable <code>dt</code> which is the change in simulation time since the system was last called. This has it's own issues (see <a href=\"#!/osrf/gazebo_experimental/issues/8/make-it-easy-for-a-system-to-know-current\" rel=\"nofollow\" title=\"Make it easy for a system to know current simulation time\" class=\"ap-connect-link\"><s>#8</s></a>). This is a proposal to make the Manager class be the authority for simulation time.</p>\n<p>Add</p>\n<ul>\n<li><code>ignition::common::Time Manager::SimulationTime()</code> returns the current sim time </li>\n<li><code>PauseLock Manager::Pause()</code> Simulation time is paused until all <code>PauseLock</code>s are destructed</li>\n<li><code>ignition::common::Duration</code> class to hold a change in time</li>\n<li><code>void Manager::SimulationTimeStep(ignition::common::Duration)</code> sets the time step for simulation</li>\n</ul>\n<p>Change</p>\n<ul>\n<li><code>void Manager::UpdateSystems(double _dt)</code> to <code>void Manager::UpdateSystems()</code></li>\n</ul>\n<p>The <code>PauseLock</code> increases a reference counter on construction and decreases it on destruction. It's purpose is to prevent systems running at the same time from pausing/unpausing and conflicting with each other. This solves an issue observed recently where someone wanted to synchronize gazebo with an external process by pausing it, but some unknown part of gazebo kept unpausing the simulation. This way the simulation only proceeds when all PauseLocks cease to exist.</p>\n<p>The <code>Duration</code> would be an enhancement to ignition-common. It would probably be based on the ROS 1 roscpp Duration and methods would be added to <code>ignition::common::Time</code> to support adding and subtracting durations.</p>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": null, "edited_on": null, "created_on": "2017-04-20T18:28:56.483121+00:00", "milestone": null, "updated_on": "2017-04-25T20:21:51.130401+00:00", "type": "issue", "id": 12}