{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_experimental.json"}, "html": {"href": "#!/osrf/gazebo_experimental"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc79acda-fe93-46b4-96a4-f1603142a10a}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_experimental", "full_name": "osrf/gazebo_experimental", "uuid": "{bc79acda-fe93-46b4-96a4-f1603142a10a}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo_experimental/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo_experimental/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/2/watch"}, "comments": {"href": "data/repositories/osrf/gazebo_experimental/issues/2/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo_experimental/issues/2/add-method-to-check-if-component-changed"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_experimental/issues/2/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Add method to check if component changed since last time step", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently a system can query entities that have all required components. It gets a list of `EntityId` that match. This proposal is to add a way to see if a component on an entity has changed since the last update. It would mean :\r\n\r\n* Add a method `Entity::IsDifferent(ComponentType)` which returns 0 if the component was not modified, or a non-zero value indicating if the component was created, deleted, or just changed.\r\n* change `Entity::Component()` to return a pointer to a const object\r\n* Add `Entity::ComponentMutable()` to return a pointer to a non-const component for writing and set an internal flag that the component was modified\r\n* Add convenience methods using templates for the above.\r\n* Supporting changes in `Manager`, `EntityComponentDatabase`, and `EntityQuery`.\r\n\r\nThe purpose is to enable a system to update its internal state only if there have been changes. For example, a physics system would only change the shape of an object if the shape changed, or stop simulating a body if the component describing it was removed.\r\n\r\n\r\nExample\r\n\r\n```\r\n#!c++\r\n\r\nvoid MySystemUpdate(const EntityQuery &_query)\r\n{\r\n  for (EntityId id : _query->EntityIds())\r\n  {\r\n    auto e = manager->Entity(id);\r\n    switch (e.IsDifferent<components::WorldPose>())\r\n      {\r\n        case WAS_CREATED:\r\n          // add thing\r\n          break;\r\n        case WAS_DELETED:\r\n          // add thing\r\n          break;\r\n        case WAS_MODIFIED:\r\n          // add thing\r\n          break;\r\n         default: break;\r\n      }\r\n      // ...\r\n      if (needsChanging)\r\n      {\r\n        auto p = e.ComponentMutable<components::worldPose>();\r\n        // ...  Do changes\r\n      }\r\n      else\r\n      {\r\n        auto p = e.Component<components::WorldPose>();\r\n        // ... read only access to component\r\n      }\r\n  }\r\n}\r\n```", "markup": "markdown", "html": "<p>Currently a system can query entities that have all required components. It gets a list of <code>EntityId</code> that match. This proposal is to add a way to see if a component on an entity has changed since the last update. It would mean :</p>\n<ul>\n<li>Add a method <code>Entity::IsDifferent(ComponentType)</code> which returns 0 if the component was not modified, or a non-zero value indicating if the component was created, deleted, or just changed.</li>\n<li>change <code>Entity::Component()</code> to return a pointer to a const object</li>\n<li>Add <code>Entity::ComponentMutable()</code> to return a pointer to a non-const component for writing and set an internal flag that the component was modified</li>\n<li>Add convenience methods using templates for the above.</li>\n<li>Supporting changes in <code>Manager</code>, <code>EntityComponentDatabase</code>, and <code>EntityQuery</code>.</li>\n</ul>\n<p>The purpose is to enable a system to update its internal state only if there have been changes. For example, a physics system would only change the shape of an object if the shape changed, or stop simulating a body if the component describing it was removed.</p>\n<p>Example</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">MySystemUpdate</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">EntityQuery</span> <span class=\"o\">&amp;</span><span class=\"n\">_query</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">EntityId</span> <span class=\"nl\">id</span> <span class=\"p\">:</span> <span class=\"n\">_query</span><span class=\"o\">-&gt;</span><span class=\"n\">EntityIds</span><span class=\"p\">())</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">-&gt;</span><span class=\"n\">Entity</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">IsDifferent</span><span class=\"o\">&lt;</span><span class=\"n\">components</span><span class=\"o\">::</span><span class=\"n\">WorldPose</span><span class=\"o\">&gt;</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"nl\">WAS_CREATED</span><span class=\"p\">:</span>\n          <span class=\"c1\">// add thing</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"nl\">WAS_DELETED</span><span class=\"p\">:</span>\n          <span class=\"c1\">// add thing</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"nl\">WAS_MODIFIED</span><span class=\"p\">:</span>\n          <span class=\"c1\">// add thing</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n         <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// ...</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">needsChanging</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">ComponentMutable</span><span class=\"o\">&lt;</span><span class=\"n\">components</span><span class=\"o\">::</span><span class=\"n\">worldPose</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n        <span class=\"c1\">// ...  Do changes</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">else</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">Component</span><span class=\"o\">&lt;</span><span class=\"n\">components</span><span class=\"o\">::</span><span class=\"n\">WorldPose</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n        <span class=\"c1\">// ... read only access to component</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-10T17:32:03.073985+00:00", "milestone": null, "updated_on": "2017-04-14T21:28:45.478933+00:00", "type": "issue", "id": 2}