{"rendered": {"description": {"raw": "Note: it'll not be automatically started. I added an arg to `fc_run_team_docker.bash` to start traffic shaper. \r\n\r\nTesting is a bit more involved:\r\n\r\n1. launch simulator and FC (use AMI `src-fc-0.1.12a: ami-8f2909ef` for FC)\r\n1. In FC instance, update cloudsim-sim to `fc_tc` branch and comment out the `if` check in `fc_run_team_docker.bash` to always start `src_monitor.bash` on FC\r\n1. Press `>1` on sim instance to launch simulation. Wait for robot to be ready. You should see `Done` in `~/code/cloudsim-docker.log`\r\n1. attach to sim docker instance and start the task: `rosservice call /srcsim/finals/start_task 1 1`\r\n1. in sim docker instance, move the robot to checkpoint1: `gz model -m valkyrie -x 2.0 -y 0 -z 1.1 -R 0 -P 0 -Y 0`\r\n1. verify messages are published to task topic: `rostopic echo /srcsim/finals/task`. If that doesn't happen, something is probably wrong in the init process. You'll need to stop the container and repeat from step 3\r\n1. press `START` on FC instance, this should trigger traffic shaper\r\n1. Launch VPN on OCU and test bandwidth to FC. e.g. `iperf -s` on OCU and `iperf -c 192.168.2.150` on FC to test downlink bandwidth", "markup": "markdown", "html": "<p>Note: it'll not be automatically started. I added an arg to <code>fc_run_team_docker.bash</code> to start traffic shaper. </p>\n<p>Testing is a bit more involved:</p>\n<ol>\n<li>launch simulator and FC (use AMI <code>src-fc-0.1.12a: ami-8f2909ef</code> for FC)</li>\n<li>In FC instance, update cloudsim-sim to <code>fc_tc</code> branch and comment out the <code>if</code> check in <code>fc_run_team_docker.bash</code> to always start <code>src_monitor.bash</code> on FC</li>\n<li>Press <code>&gt;1</code> on sim instance to launch simulation. Wait for robot to be ready. You should see <code>Done</code> in <code>~/code/cloudsim-docker.log</code></li>\n<li>attach to sim docker instance and start the task: <code>rosservice call /srcsim/finals/start_task 1 1</code></li>\n<li>in sim docker instance, move the robot to checkpoint1: <code>gz model -m valkyrie -x 2.0 -y 0 -z 1.1 -R 0 -P 0 -Y 0</code></li>\n<li>verify messages are published to task topic: <code>rostopic echo /srcsim/finals/task</code>. If that doesn't happen, something is probably wrong in the init process. You'll need to stop the container and repeat from step 3</li>\n<li>press <code>START</code> on FC instance, this should trigger traffic shaper</li>\n<li>Launch VPN on OCU and test bandwidth to FC. e.g. <code>iperf -s</code> on OCU and <code>iperf -c 192.168.2.150</code> on FC to test downlink bandwidth</li>\n</ol>", "type": "rendered"}, "title": {"raw": "Integrate traffic shaper script", "markup": "markdown", "html": "<p>Integrate traffic shaper script</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Note: it'll not be automatically started. I added an arg to `fc_run_team_docker.bash` to start traffic shaper. \r\n\r\nTesting is a bit more involved:\r\n\r\n1. launch simulator and FC (use AMI `src-fc-0.1.12a: ami-8f2909ef` for FC)\r\n1. In FC instance, update cloudsim-sim to `fc_tc` branch and comment out the `if` check in `fc_run_team_docker.bash` to always start `src_monitor.bash` on FC\r\n1. Press `>1` on sim instance to launch simulation. Wait for robot to be ready. You should see `Done` in `~/code/cloudsim-docker.log`\r\n1. attach to sim docker instance and start the task: `rosservice call /srcsim/finals/start_task 1 1`\r\n1. in sim docker instance, move the robot to checkpoint1: `gz model -m valkyrie -x 2.0 -y 0 -z 1.1 -R 0 -P 0 -Y 0`\r\n1. verify messages are published to task topic: `rostopic echo /srcsim/finals/task`. If that doesn't happen, something is probably wrong in the init process. You'll need to stop the container and repeat from step 3\r\n1. press `START` on FC instance, this should trigger traffic shaper\r\n1. Launch VPN on OCU and test bandwidth to FC. e.g. `iperf -s` on OCU and `iperf -c 192.168.2.150` on FC to test downlink bandwidth", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/cloudsim-sim/pullrequests/57/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/cloudsim-sim/diffstat/osrf/cloudsim-sim:bd17f3f2c874%0Da624743e63fe?from_pullrequest_id=57"}, "commits": {"href": "data/repositories/osrf/cloudsim-sim/pullrequests/57/commits.json"}, "self": {"href": "data/repositories/osrf/cloudsim-sim/pullrequests/57.json"}, "comments": {"href": "data/repositories/osrf/cloudsim-sim/pullrequests/57/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/cloudsim-sim/pullrequests/57/merge"}, "html": {"href": "#!/osrf/cloudsim-sim/pull-requests/57"}, "activity": {"href": "data/repositories/osrf/cloudsim-sim/pullrequests/57/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/cloudsim-sim/diff/osrf/cloudsim-sim:bd17f3f2c874%0Da624743e63fe?from_pullrequest_id=57"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/cloudsim-sim/pullrequests/57/approve"}, "statuses": {"href": "data/repositories/osrf/cloudsim-sim/pullrequests/57/statuses_page=1.json"}}, "title": "Integrate traffic shaper script", "close_source_branch": true, "reviewers": [], "id": 57, "destination": {"commit": {"hash": "a624743e63fe", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/cloudsim-sim/commit/a624743e63fe.json"}, "html": {"href": "#!/osrf/cloudsim-sim/commits/a624743e63fe"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/cloudsim-sim.json"}, "html": {"href": "#!/osrf/cloudsim-sim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7338bbed-6d00-4c97-9f6f-3aab7f13d165}ts=default"}}, "type": "repository", "name": "cloudsim-sim", "full_name": "osrf/cloudsim-sim", "uuid": "{7338bbed-6d00-4c97-9f6f-3aab7f13d165}"}, "branch": {"name": "default"}}, "created_on": "2017-05-24T23:23:42.061120+00:00", "summary": {"raw": "Note: it'll not be automatically started. I added an arg to `fc_run_team_docker.bash` to start traffic shaper. \r\n\r\nTesting is a bit more involved:\r\n\r\n1. launch simulator and FC (use AMI `src-fc-0.1.12a: ami-8f2909ef` for FC)\r\n1. In FC instance, update cloudsim-sim to `fc_tc` branch and comment out the `if` check in `fc_run_team_docker.bash` to always start `src_monitor.bash` on FC\r\n1. Press `>1` on sim instance to launch simulation. Wait for robot to be ready. You should see `Done` in `~/code/cloudsim-docker.log`\r\n1. attach to sim docker instance and start the task: `rosservice call /srcsim/finals/start_task 1 1`\r\n1. in sim docker instance, move the robot to checkpoint1: `gz model -m valkyrie -x 2.0 -y 0 -z 1.1 -R 0 -P 0 -Y 0`\r\n1. verify messages are published to task topic: `rostopic echo /srcsim/finals/task`. If that doesn't happen, something is probably wrong in the init process. You'll need to stop the container and repeat from step 3\r\n1. press `START` on FC instance, this should trigger traffic shaper\r\n1. Launch VPN on OCU and test bandwidth to FC. e.g. `iperf -s` on OCU and `iperf -c 192.168.2.150` on FC to test downlink bandwidth", "markup": "markdown", "html": "<p>Note: it'll not be automatically started. I added an arg to <code>fc_run_team_docker.bash</code> to start traffic shaper. </p>\n<p>Testing is a bit more involved:</p>\n<ol>\n<li>launch simulator and FC (use AMI <code>src-fc-0.1.12a: ami-8f2909ef</code> for FC)</li>\n<li>In FC instance, update cloudsim-sim to <code>fc_tc</code> branch and comment out the <code>if</code> check in <code>fc_run_team_docker.bash</code> to always start <code>src_monitor.bash</code> on FC</li>\n<li>Press <code>&gt;1</code> on sim instance to launch simulation. Wait for robot to be ready. You should see <code>Done</code> in <code>~/code/cloudsim-docker.log</code></li>\n<li>attach to sim docker instance and start the task: <code>rosservice call /srcsim/finals/start_task 1 1</code></li>\n<li>in sim docker instance, move the robot to checkpoint1: <code>gz model -m valkyrie -x 2.0 -y 0 -z 1.1 -R 0 -P 0 -Y 0</code></li>\n<li>verify messages are published to task topic: <code>rostopic echo /srcsim/finals/task</code>. If that doesn't happen, something is probably wrong in the init process. You'll need to stop the container and repeat from step 3</li>\n<li>press <code>START</code> on FC instance, this should trigger traffic shaper</li>\n<li>Launch VPN on OCU and test bandwidth to FC. e.g. <code>iperf -s</code> on OCU and <code>iperf -c 192.168.2.150</code> on FC to test downlink bandwidth</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "db8a9931e70e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/cloudsim-sim/commit/db8a9931e70e.json"}, "html": {"href": "#!/osrf/cloudsim-sim/commits/db8a9931e70e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/cloudsim-sim.json"}, "html": {"href": "#!/osrf/cloudsim-sim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7338bbed-6d00-4c97-9f6f-3aab7f13d165}ts=default"}}, "type": "repository", "name": "cloudsim-sim", "full_name": "osrf/cloudsim-sim", "uuid": "{7338bbed-6d00-4c97-9f6f-3aab7f13d165}"}, "branch": {"name": "fc_tc"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-05-30T15:57:15.387653+00:00", "type": "participant", "approved": true, "user": {"display_name": "Patricio Reyna Almandos", "uuid": "{8d07164d-cee3-4eb0-8816-97f42c297bc3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8d07164d-cee3-4eb0-8816-97f42c297bc3%7D"}, "html": {"href": "https://bitbucket.org/%7B8d07164d-cee3-4eb0-8816-97f42c297bc3%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2f4f0911-c46a-4f3c-92af-650544415846/235d39e4-77b1-46b7-ac0f-900424378fef/128"}}, "nickname": "Patricio Reyna Almandos", "type": "user", "account_id": "557058:2f4f0911-c46a-4f3c-92af-650544415846"}}, {"role": "PARTICIPANT", "participated_on": "2017-05-30T18:15:14.110526+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2017-05-30T18:15:32.620241+00:00", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "merge_commit": {"hash": "bd17f3f2c874", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/cloudsim-sim/commit/bd17f3f2c874.json"}, "html": {"href": "#!/osrf/cloudsim-sim/commits/bd17f3f2c874"}}}, "closed_by": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}